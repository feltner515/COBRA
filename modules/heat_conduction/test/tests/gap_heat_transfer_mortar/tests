[Tests]
  design = 'Constraints/index.md ModularGapConductanceConstraint.md'
  issues = '#13080 #19229'
  [test]
    type = Exodiff
    input = 'gap_heat_transfer_mortar.i'
    exodiff = 'gap_heat_transfer_mortar_out.e'
    custom_cmp = 'one-variable-temp.cmp'
    partial = True
    map = False
    requirement = "We shall be able to produce the expected result for a gap conductance test case "
                  "using the mortar method."
  []
  [modular]
    type = Exodiff
    input = 'modular_gap_heat_transfer_mortar.i'
    exodiff = 'modular_gap_heat_transfer_mortar_out.e'
    custom_cmp = 'one-variable-temp.cmp'
    partial = True
    map = False
    requirement = "We shall be able to produce the expected result for a gap conductance test case "
                  "using the mortar method using the modular gap flux system."
  []
  [modular_multiple]
    type = 'Exodiff'
    input = 'gap_heat_transfer_radiation_test.i'
    exodiff = 'gap_heat_transfer_radiation_test_out.e'
    abs_zero = 1e-06
    requirement = "We shall be able to produce the expected result for a combined gap conductance "
                  "and radiative heat transfer test case using the mortar method using the modular "
                  "gap flux system"
  []

  [displaced]
    type = Exodiff
    input = 'gap_heat_transfer_mortar_displaced.i'
    exodiff = 'gap_heat_transfer_mortar_displaced_out.e'
    custom_cmp = 'one-variable-temp.cmp'
    partial = True
    map = False
    requirement = "We shall be able to run the mortar method on a displaced mesh, supplying the "
                  "displacements with **constant** auxiliary variables"
  []
  [modular_displaced]
    type = Exodiff
    input = 'modular_gap_heat_transfer_mortar_displaced.i'
    exodiff = 'modular_gap_heat_transfer_mortar_displaced_out.e'
    custom_cmp = 'one-variable-temp.cmp'
    partial = True
    map = False
    requirement = "We shall be able to produce the expected result for a gap conductance test case "
                  "using the mortar method using the modular gap flux system with a displaced mesh."
  []
  [displaced_rz]
    type = Exodiff
    input = 'gap_heat_transfer_mortar_displaced.i'
    exodiff = 'gap_heat_transfer_mortar_displaced_rz_out.e'
    cli_args = 'Outputs/file_base=gap_heat_transfer_mortar_displaced_rz_out Problem/coord_type=RZ'
    requirement = "The system shall accurately calculate axisymmetric coordinates on mortar finite "
                  "element segments"
  []
  [bc_gap_heat_transfer_displaced_radiation]
    type = CSVDiff
    input = 'bc_gap_heat_transfer_displaced_radiation.i'
    csvdiff = 'bc_gap_heat_transfer_displaced_radiation_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to generate node-to-segment numerical results for radiation "
                  "through plates and use it as a reference for mortar-based constraints."
  []
  [modular_gap_heat_transfer_mortar_displaced_radiation]
    type = CSVDiff
    input = 'modular_gap_heat_transfer_mortar_displaced_radiation.i'
    csvdiff = 'modular_gap_heat_transfer_mortar_displaced_radiation_out_NodalTemperature_0001.csv'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for radiation through "
                  "plates that are close to those generated by the node-to-segment formulation."
  []
  [bc_gap_heat_transfer_displaced_conduction]
    type = CSVDiff
    input = 'bc_gap_heat_transfer_displaced_conduction.i'
    csvdiff = 'bc_gap_heat_transfer_displaced_conduction_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to generate node-to-segment numerical results for conduction "
                  "through plates and use it as a reference for mortar-based constraints."
  []
  [modular_gap_heat_transfer_mortar_displaced_conduction]
    type = CSVDiff
    input = 'modular_gap_heat_transfer_mortar_displaced_conduction.i'
    csvdiff = 'modular_gap_heat_transfer_mortar_displaced_conduction_out_NodalTemperature_0001.csv'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction through "
                  "plates that are close to those generated by the node-to-segment formulation."
  []
  [large_gap_heat_transfer_test_cylinder]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_cylinder.i'
    csvdiff = 'large_gap_heat_transfer_test_cylinder_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to generate node-to-segment numerical results for conduction and "
                  "radiation through cylinders and use it as a reference for mortar-based "
                  "constraints."
  []
  [large_gap_heat_transfer_test_cylinder_mortar]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_cylinder_mortar.i'
    csvdiff = 'large_gap_heat_transfer_test_cylinder_mortar_out_NodalTemperature_0001.csv'
    cli_args = 'Constraints/ced/cylinder_axis_point_1="0 0 0" Constraints/ced/cylinder_axis_point_2="0 0 5"'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation through cylinders that are close to those generated by the "
                  "node-to-segment formulation, where the cylinder axis is deduced automatically."
  []
  [large_gap_heat_transfer_test_cylinder_mortar_auto]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_cylinder_mortar.i'
    csvdiff = 'large_gap_heat_transfer_test_cylinder_mortar_out_NodalTemperature_0001.csv'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation through cylinders that are close to those generated by the "
                  "node-to-segment formulation."
  []

  [large_gap_heat_transfer_test_2d_sphere_mortar]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_cylinder_mortar.i'
    csvdiff = 'large_gap_heat_transfer_test_cylinder_mortar_out_NodalTemperature_0001.csv'
    cli_args = 'Constraints/ced/sphere_origin="0 0 0" Constraints/ced/gap_geometry_type=SPHERE'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation through spheres that are close to those generated by the "
                  "node-to-segment formulation."
  []
  [large_gap_heat_transfer_test_2d_sphere_mortar_auto]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_cylinder_mortar.i'
    csvdiff = 'large_gap_heat_transfer_test_cylinder_mortar_out_NodalTemperature_0001.csv'
    cli_args = 'Constraints/ced/gap_geometry_type=SPHERE'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation through spheres that are close to those generated by the "
                  "node-to-segment formulation, where the sphere origin is deduced automatically."
  []

  [large_gap_heat_transfer_test_rz_cylinder]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_rz_cylinder.i'
    csvdiff = 'large_gap_heat_transfer_test_rz_cylinder_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to generate node-to-segment numerical results for conduction and "
                  "radiation through cylinders with axisymmetry and use it as a reference for "
                  "mortar-based constraints."
  []
  [large_gap_heat_transfer_test_rz_cylinder_mortar]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_rz_cylinder_mortar.i'
    csvdiff = 'large_gap_heat_transfer_test_rz_cylinder_mortar_out_NodalTemperature_0001.csv'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiationthrough cylinders with axisymmetry that are close to those generated by "
                  "the node-to-segment formulation."
  []
  [large_gap_heat_transfer_test_sphere]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_sphere.i'
    csvdiff = 'large_gap_heat_transfer_test_sphere_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to generate node-to-segment numerical results for conduction and "
                  "radiation through concentric spheres with axisymmetry and use it as a reference "
                  "for mortar-based constraints."
  []
  [large_gap_heat_transfer_test_sphere_mortar]
    type = CSVDiff
    input = 'large_gap_heat_transfer_test_sphere_mortar.i'
    csvdiff = 'large_gap_heat_transfer_test_sphere_mortar_out_NodalTemperature_0001.csv'
    rel_err = 0.06
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation through concentric spheres with axisymmetry that are close to those "
                  "generated by the node-to-segment formulation."
  []
  [modular_gap_heat_transfer_mortar_displaced_radiation_conduction]
    type = CSVDiff
    input = 'modular_gap_heat_transfer_mortar_displaced_radiation_conduction.i'
    csvdiff = 'modular_gap_heat_transfer_mortar_displaced_radiation_conduction_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation in two dimensions. This test is used as a reference for computing "
                  "separate gap physics, i.e. for the use of multiple heat flux Lagrange multipliers"
  []
  [modular_gap_heat_transfer_mortar_displaced_radiation_conduction_separate]
    type = CSVDiff
    input = 'modular_gap_heat_transfer_mortar_displaced_radiation_conduction_separate.i'
    csvdiff = 'modular_gap_heat_transfer_mortar_displaced_radiation_conduction_separate_out_NodalTemperature_0001.csv'
    requirement = "We shall be able to reproduce heat transfer mortar results when the gap physics "
                  "(i.e. radiation and conduction) are separated in two constraint classes with "
                  "independent Lagrange multipliers"
  []
  [large_gap_heat_transfer_test_sphere_mortar_geometry_error]
    type = RunException
    input = 'large_gap_heat_transfer_test_sphere_mortar_error.i'
    expect_err = 'gap_geometry_type = SPHERE'
    requirement = "We shall be able to generate a meaningful error message if the user does not "
                  "define the sphere origin when a spherical geometry has been chosen."
  []
  [modular_gap_heat_transfer_mortar_displaced_conduction_function]
    type = CSVDiff
    input = 'modular_gap_heat_transfer_mortar_displaced_conduction_function.i'
    csvdiff = 'modular_gap_heat_transfer_mortar_displaced_conduction_function_out_NodalTemperature_0001.csv'
    rel_err = 1.0e-3
    requirement = "We shall be able to generate mortar numerical results for conduction through "
                  "plates that are close to those generated by the node-to-segment formulation and "
                  "using the function feature to enrich the evolution of the gap conductance."
  []
  [gap_heat_transfer_3d]
    input = 'gap_heat_transfer_3D.i'
    type = CSVDiff
    csvdiff = 'gap_heat_transfer_3D_out_NodalTemperature_0001.csv'
    rel_err = 1e-3
    abs_zero = 1e-8
    mesh_mode = 'REPLICATED'
    requirement = "We shall be able to generate node-to-segment numerical results for conduction and "
                  "radiation between two blocks in 3D and use it as a reference for mortar-based "
                  "constraints."
  []
  [gap_heat_transfer_3d_hex20]
    input = 'gap_heat_transfer_3D.i'
    type = CSVDiff
    csvdiff = 'gap_heat_transfer_3D_hex20_out_NodalTemperature_0001.csv'
    cli_args = 'Mesh/left_block/elem_type=HEX20 Mesh/right_block/elem_type=HEX20 Outputs/file_base=gap_heat_transfer_3D_hex20_out'
    rel_err = 1e-3
    abs_zero = 1e-8
    mesh_mode = 'REPLICATED'
    requirement = "We shall be able to generate node-to-segment numerical results for conduction and "
                  "radiation between two blocks in 3D using HEX20 elements and use it as a reference "
                  "for mortar-based constraints."
  []
  [gap_heat_transfer_3d_mortar]
    input = 'gap_heat_transfer_3D_mortar.i'
    type = CSVDiff
    csvdiff = 'gap_heat_transfer_3D_mortar_out_NodalTemperature_0001.csv'
    rel_err = 4e-2
    abs_zero = 1e-8
    mesh_mode = 'REPLICATED'
    min_ad_size = 100
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation between two blocks in 3D and match reasonably well with the "
                  "node-to-segment approach with a refined mesh."
    method = '!dbg'
    valgrind = 'none'
  []
  [gap_heat_transfer_3d_mortar_hex20]
    input = 'gap_heat_transfer_3D_mortar.i'
    type = CSVDiff
    csvdiff = 'gap_heat_transfer_3D_mortar_hex20_out_NodalTemperature_0001.csv'
    cli_args = 'Mesh/left_block/elem_type=HEX20 Mesh/right_block/elem_type=HEX20 Outputs/file_base=gap_heat_transfer_3D_mortar_hex20_out'
    rel_err = 4e-2
    abs_zero = 1e-8
    mesh_mode = 'REPLICATED'
    requirement = "We shall be able to generate mortar numerical results for conduction and "
                  "radiation between two blocks in 3D using HEX20 elements and match reasonably well "
                  "with the node-to-segment approach with a refined mesh."
    valgrind = 'heavy'
    method = '!dbg'
  []
  [gap_heat_transfer_sphere3d]
    input = 'gap_heat_transfer_sphere3D.i'
    type = CSVDiff
    csvdiff = 'gap_heat_transfer_sphere3D_out_NodalTemperature_0001.csv'
    rel_err = 1e-3
    abs_zero = 1e-8
    mesh_mode = 'REPLICATED'
    requirement = "We shall be able to generate node-to-segment numerical results using thermal "
                  "contact that resolves spherical heat transfer for a constant conductivity gap in "
                  "3D using HEX20 elements"
  []
  [gap_heat_transfer_sphere3d_mortar]
    input = 'gap_heat_transfer_sphere3D_mortar.i'
    type = CSVDiff
    csvdiff = 'gap_heat_transfer_sphere3D_mortar_out_NodalTemperature_0001.csv'
    rel_err = 4e-2
    abs_zero = 1e-8
    mesh_mode = 'REPLICATED'
    requirement = "We shall be able to generate mortar numerical results using thermal contact that "
                  "resolves spherical heat transfer for a constant conductivity gap in 3D using "
                  "HEX20 elements and match reasonably well with the node-to-segment approach with a "
                  "refined mesh."
  []

  [pressure_dependent_conductance]
    design = 'GapFluxModelPressureDependentConduction.md'
    issues = '#20658'
    requirement = "We shall be able to compute the thermal contact across a closed gap as a function "
                  "of contact pressure,"
    [closed_gap_prescribed_pressure]
      type = CSVDiff
      input = 'closed_gap_prescribed_pressure.i'
      csvdiff = 'closed_gap_prescribed_pressure_out.csv'
      cli_args = "Mesh/allow_renumbering=false"
      detail = "and the material thermal conductivities and hardness values consistent with an "
               "analytical solution for the temperatures at the interface."
    []
  []
  [fv]
    requirement = "The system shall be able to incorporate gap heat transfer fluxes from radiation "
                  "and conduction, into a finite volume discretization, via the mortar method"
    issues = '#21599'
    design = 'FunctorGapFluxModelRadiation.md FunctorGapFluxModelConduction.md ModularGapConductanceConstraint.md'
    [xyz]
      input = 'fv_modular_gap_heat_transfer_mortar_radiation_conduction.i'
      type = Exodiff
      exodiff = 'fv_modular_gap_heat_transfer_mortar_radiation_conduction_out.e'
      detail = 'in a Cartesian coordinate system'
    []
    [rz]
      input = 'fv_modular_gap_heat_transfer_mortar_radiation_conduction.i'
      type = Exodiff
      exodiff = 'fv_modular_gap_heat_transfer_mortar_radiation_conduction_rz_out.e'
      cli_args = "Outputs/file_base=fv_modular_gap_heat_transfer_mortar_radiation_conduction_rz_out "
                 "Mesh/coord_type=RZ Mesh/inactive=''"
      detail = 'in an axisymmetric coordinate system'
    []
  []
[]
