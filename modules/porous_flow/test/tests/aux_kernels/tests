[Tests]
  [darcy_velocity]
    type = 'CSVDiff'
    input = 'darcy_velocity.i'
    csvdiff = 'darcy_velocity.csv'
    rel_err = 1.0E-5
    threading = '!pthreads'
    requirement = 'The system shall be able to calculate the Darcy flow velocity vector for a fully-saturated case.'
    issues = '#17159'
    design = 'PorousFlowDarcyVelocityComponent.md'
  []
  [darcy_velocity_fv]
    type = 'CSVDiff'
    input = 'darcy_velocity_fv.i'
    csvdiff = 'darcy_velocity_fv_out.csv'
    rel_err = 1.0E-5
    threading = '!pthreads'
    requirement = 'The system shall be able to calculate the Darcy flow velocity vector for a fully-saturated finite volume case.'
    issues = '#17159 #21275'
    design = 'PorousFlowDarcyVelocityComponent.md'
  []
  [properties]
    type = 'Exodiff'
    input = 'properties.i'
    exodiff = 'properties_out.e'
    threading = '!pthreads'
    requirement = 'The system shall be able to populate AuxVariables corresponding to capillary pressure, saturation, fluid density, etc.'
    issues = '#17159'
    design = 'PorousFlowPropertyAux.md'
  []
  [darcy_velocity_lower]
    type = 'CSVDiff'
    input = 'darcy_velocity_lower.i'
    csvdiff = 'darcy_velocity_lower_out.csv'
    threading = '!pthreads'
    requirement = 'The system shall be able to calculate the Darcy flow velocity vector on 2D fracture embedded inside a 3D matrix.'
    issues = '#17159'
    design = 'PorousFlowDarcyVelocityComponentLowerDimensional.md'
  []
  [darcy_velocity_lower_tets]
    type = 'CSVDiff'
    input = 'darcy_velocity_lower.i'
    cli_args = 'Mesh/file=fractured_block_tets.e'
    prereq = 'darcy_velocity_lower'
    csvdiff = 'darcy_velocity_lower_out.csv'
    threading = '!pthreads'
    requirement = 'The system shall be able to calculate the Darcy flow velocity vector on 2D fracture embedded inside a 3D matrix, including the case with triangular and tetrahedral elements.'
    issues = '#17159'
    design = 'PorousFlowDarcyVelocityComponentLowerDimensional.md'
  []
  [darcy_velocity_lower_2D]
    type = 'CSVDiff'
    input = 'darcy_velocity_lower_2D.i'
    csvdiff = 'darcy_velocity_lower_2D_out.csv'
    threading = '!pthreads'
    requirement = 'The system shall be able to calculate the Darcy flow velocity vector on 1D fracture embedded inside a 2D matrix.'
    issues = '#17159'
    design = 'PorousFlowDarcyVelocityComponentLowerDimensional.md'
  []
  [darcy_velocity_lower_except]
    type = 'RunException'
    input = 'darcy_velocity_lower_except.i'
    expect_err = 'The variable fracture_vel_x must must be defined on lower-dimensional elements only since it employs PorousFlowDarcyVelocityComponentLowerDimensional'
    threading = '!pthreads'
    requirement = 'An error shall be produced if the system is asked to calculate the Darcy flow velocity vector on a lower-dimensional fracture, but the variables are not defined only on the lower-dimensional elements.'
    issues = '#17159'
    design = 'PorousFlowDarcyVelocityComponentLowerDimensional.md'
  []
  [element_length_except1]
    type = RunException
    input = element_length_except1.i
    expect_err = 'The variable must be an elemental variable'
    requirement = 'The system shall be able to calculate a measure of element length in a given direction, and shall produce an error if a nodal variable is used to store the results.'
    issues = '#18232'
    design = 'PorousFlowElementLength.md'
  []
  [element_length_except2]
    type = RunException
    input = element_length_except2.i
    expect_err = 'Three values or variables must be provided'
    requirement = 'The system shall be able to calculate a measure of element length in a given direction, and shall produce an error if the direction is incorrectly specified.'
    issues = '#18232'
    design = 'PorousFlowElementLength.md'
  []
  [element_length_2D]
    type = CSVDiff
    input = element_length_2D.i
    csvdiff = element_length_2D_out.csv
    requirement = 'The system shall be able to calculate a measure of element length in a given direction, in 2D.'
    issues = '#18232'
    design = 'PorousFlowElementLength.md'
  []
  [element_length_3D]
    type = CSVDiff
    input = element_length_3D.i
    csvdiff = element_length_3D_out.csv
    requirement = 'The system shall be able to calculate a measure of element length in a given direction, in 3D.'
    issues = '#18232'
    design = 'PorousFlowElementLength.md'
  []
  [element_normal_except1]
    type = RunException
    input = element_normal_except1.i
    expect_err = 'The variable must be an elemental variable'
    requirement = 'The system shall be able to calculate element normal, and shall produce an error if a nodal variable is used to store the result.'
    issues = '#18232'
    design = 'PorousFlowElementNormal.md'
  []
  [element_normal_except2]
    type = RunException
    input = element_normal_except2.i
    expect_err = 'Must not be the zero vector'
    requirement = 'The system shall be able to calculate element normal for 1D elements if provided with a perpendicular vector, and shall produce an error if the perpendicular vector is incorrectly specified.'
    issues = '#18232'
    design = 'PorousFlowElementNormal.md'
  []
  [element_normal_except3]
    type = RunException
    input = element_normal_except3.i
    expect_err = 'Must not be the zero vector'
    requirement = 'The system shall be able to calculate element normals for meshes containing 3D elements if provided with a default value for the 3D elements, but shall produce an error if that default value is incorrectly specified.'
    issues = '#18232'
    design = 'PorousFlowElementNormal.md'
  []
  [element_normal_1D_2D]
    type = CSVDiff
    input = element_normal_1D_2D.i
    csvdiff = element_normal_1D_2D_out.csv
    requirement = 'The system shall be able to calculate element normals for 1D and 2D elements, if provided with a perpendicular vector for the 1D elements.'
    issues = '#18232'
    design = 'PorousFlowElementNormal.md'
  []
  [element_normal_2D_3D]
    type = CSVDiff
    input = element_normal_2D_3D.i
    csvdiff = element_normal_2D_3D_out.csv
    requirement = 'The system shall be able to calculate element normals for 2D and 3D elements, if provided with a default value for the 3D elements.'
    issues = '#18232'
    design = 'PorousFlowElementNormal.md'
  []
[]
