[Tests]
  [mass01]
    type = 'PetscJacobianTester'
    input = 'mass01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1phase, constant-bulk density, constant porosity, 1-component, fully saturated.'
  []
  [mass01_nodens]
    type = 'PetscJacobianTester'
    input = 'mass01_nodens.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1phase, constant-bulk density, constant porosity, 1-component, fully saturated, in a volume approach.'
    issues = '#16841'
    design = 'PorousFlowMassTimeDerivative.md porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass02]
    type = 'PetscJacobianTester'
    input = 'mass02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1phase, constant-bulk density, constant porosity, 1-component, unsaturated.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass03]
    type = 'PetscJacobianTester'
    input = 'mass03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1phase, constant-bulk density, constant porosity, multi-component, unsaturated.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass04]
    type = 'PetscJacobianTester'
    input = 'mass04.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 2-phase, constant-bulk density, constant porosity, 2-component.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass05]
    type = 'PetscJacobianTester'
    input = 'mass05.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 2-phase, constant-bulk density, constant porosity, multi-component.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass05_nodens]
    type = 'PetscJacobianTester'
    input = 'mass05_nodens.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 2-phase, constant-bulk density, constant porosity, multi-component, in a volume formulation.'
    issues = '#16841'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass06]
    type = 'PetscJacobianTester'
    input = 'mass06.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1-phase, constant-bulk density, constant porosity, 1-component, in a log(mass-density) formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass07]
    type = 'PetscJacobianTester'
    input = 'mass07.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1-phase, constant-bulk density, constant porosity, 1-component, in a log(mass-density), volumetric formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass08]
    type = 'PetscJacobianTester'
    input = 'mass08.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1-phase, constant-bulk density, HMporosity, 1-component, unsaturated.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass09]
    type = 'PetscJacobianTester'
    input = 'mass09.i'
    ratio_tol = 5E-6 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 2-phase, constant-bulk density, 2-component, PS-formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass10]
    type = 'PetscJacobianTester'
    input = 'mass10.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1-phase, constant-bulk density, HM-porosity, 1-component, unsaturated.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass10_nodens]
    type = 'PetscJacobianTester'
    input = 'mass10_nodens.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1-phase, constant-bulk density, HM-porosity, 1-component, unsaturated, with a volumetric formulation.'
    issues = '#16841'
    design = 'PorousFlowMassTimeDerivative.md porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass01_fully_saturated]
    type = 'PetscJacobianTester'
    input = 'mass01_fully_saturated.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass time derivative of 1-phase, with a fully-saturated formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [fflux01]
    type = 'PetscJacobianTester'
    input = 'fflux01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 1-component, unsaturated, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux02]
    type = 'PetscJacobianTester'
    input = 'fflux02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 3-component, unsaturated, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux03]
    type = 'PetscJacobianTester'
    input = 'fflux03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 2-phase, 2-component, PS formulation, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux04]
    type = 'PetscJacobianTester'
    input = 'fflux04.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 2-phase, 3-component, PP formulation, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux05]
    type = 'PetscJacobianTester'
    input = 'fflux05.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, log-mass-density formulation, fully-saturated, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux06]
    type = 'PetscJacobianTester'
    input = 'fflux06.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, log-mass-density formulation, unsaturated, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux07]
    type = 'PetscJacobianTester'
    input = 'fflux07.i'
    ratio_tol = 1E-6 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 2-phase, 2-component with components in both phases, PS formulation, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux08]
    type = 'PetscJacobianTester'
    input = 'fflux08.i'
    ratio_tol = 1E-7 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 1-component, constant viscosity, Kozeny-Carman permeability, constant fluid-bulk modulus, Corey-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux09]
    type = 'PetscJacobianTester'
    input = 'fflux09.i'
    ratio_tol = 1E-7 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 2-phase, 3-component, PP formulation, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability, with RSC capilarity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux10]
    type = 'PetscJacobianTester'
    input = 'fflux10.i'
    ratio_tol = 1E-7 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 3-component, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability, with BW capilarity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux11]
    type = 'PetscJacobianTester'
    input = 'fflux11.i'
    ratio_tol = 1E-7 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 3-component, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability, with VG capilarity with a cubic extension.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux12]
    type = 'PetscJacobianTester'
    input = 'fflux12.i'
    ratio_tol = 1E-7 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 3-component, constant viscosity, constant permeability, constant fluid-bulk modulus, FLAC-relative permeability.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux13]
    type = 'PetscJacobianTester'
    input = 'fflux13.i'
    ratio_tol = 1E-6 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 2-phase, 3-component, PP-formulation, constant viscosity, constant permeability, constant fluid-bulk modulus, Corey-relative permeability, with a harmonic-mean mobility.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux14]
    type = 'PetscJacobianTester'
    input = 'fflux14.i'
    ratio_tol = 1E-6 # lots of chain rules here
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1 -mat_fd_type ds'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 2-component multicomponent fluid (brine).'
    issues = '#6845 #23609'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux01_fully_saturated]
    type = 'PetscJacobianTester'
    input = 'fflux01_fully_saturated.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 3-components, constant viscosity, constant permeability, constant fluid-bulk modulus, fully-saturated formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [fflux02_fully_saturated]
    type = 'PetscJacobianTester'
    input = 'fflux02_fully_saturated.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the fluid flux, with 1-phase, 3-components, constant viscosity, constant permeability, constant fluid-bulk modulus, fully-saturated formulation with strong advection.'
    issues = '#16841'
    design = 'PorousFlowFullySaturated.md PorousFlowFullySaturatedAdvectiveFlux.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [eff_stress01]
    type = 'PetscJacobianTester'
    input = 'eff_stress01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the effective stress, with 2-phase, 2-component, PP formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [eff_stress02]
    type = 'PetscJacobianTester'
    input = 'eff_stress02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the effective stress, with 2-phase, 2-component, PS formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [eff_stress03]
    type = 'PetscJacobianTester'
    input = 'eff_stress03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the effective stress, with 2-phase, 2-component, PP formulation, in RZ coordinates.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [eff_stress04]
    type = 'PetscJacobianTester'
    input = 'eff_stress04.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the effective stress, with 2-phase, 2-component, PS formulation, in RZ coordinates.'
    issues = '#6845 #12506'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass_vol_exp01]
    type = 'PetscJacobianTester'
    input = 'mass_vol_exp01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass volumetric expansion, with constant bulk modulus, constant porosity and VG capilarity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass_vol_exp02]
    type = 'PetscJacobianTester'
    input = 'mass_vol_exp02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass volumetric expansion, with constant bulk modulus, HM porosity and VG capilarity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [mass_vol_exp03]
    type = 'PetscJacobianTester'
    input = 'mass_vol_exp03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass volumetric expansion, with constant bulk modulus, HM porosity and VG capilarity, in a volumetric formulation.'
    issues = '#16841'
    design = 'PorousFlowMassVolumetricExpansion.md porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [pls01]
    type = 'PetscJacobianTester'
    input = 'pls01.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the piecewise linear sink, with 1-phase and 1-component.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [pls02]
    type = 'PetscJacobianTester'
    input = 'pls02.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the piecewise linear sink, with 2-phase and 2-components.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [pls03]
    type = 'PetscJacobianTester'
    input = 'pls03.i'
    ratio_tol = 1E-6
    cli_args = 'Executioner/num_steps=1'
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the piecewise linear sink, with 2-phase and 3-components.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [pls04]
    type = 'PetscJacobianTester'
    input = 'pls04.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the piecewise linear sink, with 2-phase and 3-components, with enthalpy, internal energy and thermal conductivity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [hgs01]
    type = 'PetscJacobianTester'
    input = 'hgs01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the half-gaussian sink.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [hcs01]
    type = 'PetscJacobianTester'
    input = 'hcs01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the half-cubic sink of fluid.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [hcs02]
    type = 'PetscJacobianTester'
    input = 'hcs02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the half-cubic sink of heat.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [hcond01]
    type = 'PetscJacobianTester'
    input = 'hcond01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat conduction, with 0 phases.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [hcond02]
    type = 'PetscJacobianTester'
    input = 'hcond02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat conduction, with 2 phases.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [denergy01]
    type = 'PetscJacobianTester'
    input = 'denergy01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the energy-density time derivative, with 0 phases.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [denergy02]
    type = 'PetscJacobianTester'
    input = 'denergy02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the energy-density time derivative, with 2-phase, 1-component, with solid displacements.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [denergy03]
    type = 'PetscJacobianTester'
    input = 'denergy03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the energy-density time derivative, with 2-phase, 1-component, with solid displacements, and TM porosity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [denergy04]
    type = 'PetscJacobianTester'
    input = 'denergy04.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the energy-density time derivative, with 2-phase, 1-component, with solid displacements, and THM porosity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [denergy05]
    type = 'PetscJacobianTester'
    input = 'denergy05.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the energy-density time derivative, with 2-phase, 1-component, with solid displacements, and THM porosity, compressive strains and ensuring porosity remains positivie.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [heat_advection01]
    type = 'PetscJacobianTester'
    input = 'heat_advection01.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat advection, with 1 phase, unsaturated.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [heat_advection02]
    type = 'PetscJacobianTester'
    input = 'heat_advection02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat advection, with 2 phase, unsaturated.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [heat_advection01_fully_saturated]
    type = 'PetscJacobianTester'
    input = 'heat_advection01_fully_saturated.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat advection, with 1 phase, fully-saturated formulation.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [heat_advection01_fullsat_upwind]
    type = 'PetscJacobianTester'
    input = 'heat_advection01_fullsat_upwind.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat advection, with 1 phase, fully-saturated, fully-upwinded formulation.'
    issues = '#16841'
    design = 'PorousFlowFullySaturatedUpwindHeatAdvection.md porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [diff01]
    type = 'PetscJacobianTester'
    input = 'diff01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the diffusion.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [diff02]
    type = 'PetscJacobianTester'
    input = 'diff02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the diffusion with constant tortuousity and diffusivity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [diff03]
    type = 'PetscJacobianTester'
    input = 'diff03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the diffusion  with 2-phases, with saturation-dependent tortuousity and MQ diffusion coefficients.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [disp01]
    type = 'PetscJacobianTester'
    input = 'disp01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the transverse dispersion.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [disp02]
    type = 'PetscJacobianTester'
    input = 'disp02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the transverse dispersion and diffusion.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [disp03]
    type = 'PetscJacobianTester'
    input = 'disp03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the transverse and longitudinal dispersion.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [disp04]
    type = 'PetscJacobianTester'
    input = 'disp04.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the transverse and longitudinal dispersion and diffusion.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [heat_vol_exp01]
    type = 'PetscJacobianTester'
    input = 'heat_vol_exp01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the heat volumetric expansion, 1phase with constant bulk modulus, VG capilarity and THM porosity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [phe01]
    type = 'PetscJacobianTester'
    input = 'phe01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the plastic heat energy.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [line_sink01]
    type = 'PetscJacobianTester'
    input = 'line_sink01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the a peaceman line sink, with 2-phase, 3-components, with enthalpy, internal energy and thermal conductivity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [line_sink02]
    type = 'PetscJacobianTester'
    input = 'line_sink02.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the a poly-line sink, with 2-phase, 3-components, with enthalpy, internal energy and thermal conductivity.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [line_sink03]
    type = 'PetscJacobianTester'
    input = 'line_sink03.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the a peaceman sink, with 2-phase, 3-components, with enthalpy, internal energy and thermal conductivity, and with many points within each element.'
    issues = '#6845 #10471 #16255'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [line_sink01_5]
    type = 'PetscJacobianTester'
    input = 'line_sink01.i'
    cli_args = 'DiracKernels/dirac4/point_file=five_points.bh DiracKernels/dirac5/point_file=five_points.bh DiracKernels/dirac6/point_file=five_points.bh Executioner/num_steps=1'
    ratio_tol = 1E-7
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the a peaceman sink, with 2-phase, 3-components, with enthalpy, internal energy and thermal conductivity, and with 5 points within each element.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [line_sink02_5]
    type = 'PetscJacobianTester'
    input = 'line_sink02.i'
    cli_args = 'DiracKernels/dirac4/point_file=five_points.bh DiracKernels/dirac5/point_file=five_points.bh DiracKernels/dirac6/point_file=five_points.bh Executioner/num_steps=1'
    ratio_tol = 1E-7
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the a poly-line sink, with 2-phase, 3-components, with enthalpy, internal energy and thermal conductivity, and with 5 points within each element.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [line_sink04]
    type = 'PetscJacobianTester'
    input = 'line_sink04.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the a poly-line sink, with 2-phase, 3-components, with enthalpy, internal energy and thermal conductivity, and with 1 point within each element.'
    issues = '#6845 #10471'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [desorped_mass01]
    type = 'PetscJacobianTester'
    input = 'desorped_mass01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the desorbed mass.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [desorped_mass_vol_exp01]
    type = 'PetscJacobianTester'
    input = 'desorped_mass_vol_exp01.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the volumetric expansion of desorbed mass.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [waterncg_twophase]
    type = 'PetscJacobianTester'
    input = 'waterncg_twophase.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the non-condensible gas version of water, 2 phase.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [waterncg_liqiud]
    type = 'PetscJacobianTester'
    input = 'waterncg_liquid.i'
    ratio_tol = 1e-6
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the non-condensible gas version of water, 1 liquid phase.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [waterncg_gas]
    type = 'PetscJacobianTester'
    input = 'waterncg_gas.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the non-condensible gas version of water, 1 gas phase.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [waterncg_twophase_nonisothermal]
    type = 'PetscJacobianTester'
    input = 'waterncg_twophase_nonisothermal.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the non-condensible gas version of water, 2 phase, nonisothermal.'
    issues = '#6845 #10167'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [brineco2_twophase]
    type = 'PetscJacobianTester'
    input = 'brineco2_twophase.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the brine equation of state, 2 phase.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [brineco2_liquid]
    type = 'PetscJacobianTester'
    input = 'brineco2_liquid.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the brine equation of state, 1 liquid phase.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [brineco2_gas]
    type = 'PetscJacobianTester'
    input = 'brineco2_gas.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the brine equation of state, 1 gas phase.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [brineco2_twophase_nonisothermal]
    type = 'PetscJacobianTester'
    input = 'brineco2_twophase_nonisothermal.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the brine equation of state, 2 phase, nonisothermal.'
    issues = '#6845 #10167'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [brineco2_liquid_2]
    type = 'PetscJacobianTester'
    input = 'brineco2_liquid_2.i'
    ratio_tol = 1e-6 # Lots of chain rule derivatives
    difference_tol = 1e10
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the brine equation of state, 1 phase with salt fraction as a variable.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [exponential_decay]
    type = 'PetscJacobianTester'
    input = 'exponential_decay.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the exponential decay.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [chem01]
    type = 'PetscJacobianTester'
    input = 'chem01.i'
    ratio_tol = 1E-3 # lots of crazy chain rules
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissoluation not depending on temperature.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem02]
    type = 'PetscJacobianTester'
    input = 'chem02.i'
    ratio_tol = 1E-5 # lots of crazy chain rules
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical precipitation not depending on temperature.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem03]
    type = 'PetscJacobianTester'
    input = 'chem03.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem04]
    type = 'PetscJacobianTester'
    input = 'chem04.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical precipitation not depending on temperature.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem05]
    type = 'PetscJacobianTester'
    input = 'chem05.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution not depending on temperature where one concentration is initialized to zero, and the stoichiometry is > 1.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem06]
    type = 'PetscJacobianTester'
    input = 'chem06.i'
    ratio_tol = 1E-4
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution not depending on temperature where one concentration is initialized to zero, and the stoichiometry is = 1.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem07]
    type = 'PetscJacobianTester'
    input = 'chem07.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution not depending on temperature where the concentrations are initialized to zero.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem08]
    type = 'PetscJacobianTester'
    input = 'chem08.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature where one concentration is initialized to zero, and the stoichiometry is > 1.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem09]
    type = 'PetscJacobianTester'
    input = 'chem09.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature where one concentration is initialized to zero, and the stoichiometry is = 1.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem10]
    type = 'PetscJacobianTester'
    input = 'chem10.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature where concentrations are initialized to zero.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem11]
    type = 'PetscJacobianTester'
    input = 'chem11.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature with 3 primary variables and 4 reactions.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem12]
    type = 'PetscJacobianTester'
    input = 'chem12.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature with 3 primary variables and 4 reactions, with negative initial concentrations.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem13]
    type = 'PetscJacobianTester'
    input = 'chem13.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the chemical dissolution depending on temperature with 3 primary variables and 4 reactions, with some zero initial concentrations.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem14]
    type = 'PetscJacobianTester'
    input = 'chem14.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the porosity depending on chemical concentrations.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [chem15]
    type = 'PetscJacobianTester'
    input = 'chem15.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the mass-fractions that depend on chemical concentrations.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []

  [basic_advection1]
    type = 'PetscJacobianTester'
    input = 'basic_advection1.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the basic advection with a pre-defined velocity vector, in the 0-phase, no temperature case.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [basic_advection2]
    type = 'PetscJacobianTester'
    input = 'basic_advection2.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the basic advection with a Darcy velocity vector in the fully-saturated, constant permeability, constant viscosity case.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [basic_advection3]
    type = 'PetscJacobianTester'
    input = 'basic_advection3.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the basic advection with a Darcy velocity vector in the unsaturated, constant permeability, constant viscosity case.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [basic_advection4]
    type = 'PetscJacobianTester'
    input = 'basic_advection4.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the basic advection with a Darcy velocity vector in the unsaturated, non-isothermal, constant permeability, constant viscosity case.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [basic_advection5]
    type = 'PetscJacobianTester'
    input = 'basic_advection5.i'
    ratio_tol = 1E-7
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the basic advection with a Darcy velocity vector in the unsaturated case.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [basic_advection6]
    type = 'PetscJacobianTester'
    input = 'basic_advection6.i'
    ratio_tol = 1E-5
    difference_tol = 1E10
    cli_args = 'Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the basic advection with a Darcy velocity vector in the 2-phase PP case.'
    issues = '#6845'
    design = 'porous_flow/tutorial_09.md porous_flow/tutorial_02.md porous_flow/solvers.md porous_flow/nonlinear_convergence_problems.md PorousFlowDictator.md'
  []
  [esbc01]
    type = 'PetscJacobianTester'
    input = 'esbc01.i'
    ratio_tol = 1E-8
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the enthalpy sink, where porepressure is specified.'
    issues = '#15742'
    design = 'PorousFlowEnthalpySink.md'
  []
  [esbc02]
    type = 'PetscJacobianTester'
    input = 'esbc02.i'
    ratio_tol = 1E-9
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the enthalpy sink, where external pressure is specified.'
    issues = '#15742'
    design = 'PorousFlowEnthalpySink.md'
  []
  [hfrompps]
    type = 'PetscJacobianTester'
    input = 'hfrompps.i'
    ratio_tol = 1E-5
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the enthalpy source.'
    issues = '#15742'
    design = 'PorousFlowPointEnthalpySourceFromPostprocessor.md'
  []
  [outflowbc01]
    type = 'PetscJacobianTester'
    input = 'outflowbc01.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the outflow boundary condition, 1-phase, 1-component.'
    issues = '#18037'
    design = 'porous_flow/tests/sinks/sinks_tests.md porous_flow/boundaries.md PorousFlowOutflowBC.md'
  []
  [outflowbc02]
    type = 'PetscJacobianTester'
    input = 'outflowbc02.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the outflow heat boundary condition, 1-phase, 1-component.'
    issues = '#18037'
    design = 'porous_flow/tests/sinks/sinks_tests.md porous_flow/boundaries.md PorousFlowOutflowBC.md'
  []
  [outflowbc03]
    type = 'PetscJacobianTester'
    input = 'outflowbc03.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the outflow fluid and heat boundary conditions, 1-phase, multi-component.'
    issues = '#18037'
    design = 'porous_flow/tests/sinks/sinks_tests.md porous_flow/boundaries.md PorousFlowOutflowBC.md'
  []
  [outflowbc04]
    type = 'PetscJacobianTester'
    input = 'outflowbc04.i'
    ratio_tol = 1E-6
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of physics kernels for the outflow fluid boundary conditions, multi-phase, multi-component.'
    issues = '#18037'
    design = 'porous_flow/tests/sinks/sinks_tests.md porous_flow/boundaries.md PorousFlowOutflowBC.md'
  []

  [linear_por]
    type = PetscJacobianTester
    input = linear_por.i
    ratio_tol = 1E-6
    difference_tol = 1E10
    threading = '!pthreads'
    requirement = 'The porous flow module shall be able to calculate the analytic Jacobian of systems that include a porosity that is a linear function of effective porepressure, temperature and volumetric strain.'
    issues = '#18079'
    design = 'porous_flow/porosity.md PorousFlowPorosityLinear.md'
  []

  [fv_flux]
    type = 'PetscJacobianTester'
    input = 'fv_mass_flux.i'
    ratio_tol = 1e-7
    cli_args = '-mat_fd_type ds Executioner/num_steps=1'
    threading = '!pthreads'
    requirement = 'The porous flow module shall compute all Jacobian entries of FV physics kernels for flux and mass conservation.'
    issues = '#21275'
    design = 'FVPorousFlowMassTimeDerivative.md FVPorousFlowAdvectiveFlux.md'
  []
[]
