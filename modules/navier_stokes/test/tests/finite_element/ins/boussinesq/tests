[Tests]
  design = 'INSADBoussinesqBodyForce.md'
  issues = '#15099'
  [exo]
    type = Exodiff
    input = boussinesq_square.i
    exodiff = boussinesq_square_out.e
    requirement = 'The system shall be able to simulate natural convection by adding the Boussinesq approximation to the incompressible Navier-Stokes equations.'
    valgrind = HEAVY
  []
  [threaded_exo]
    type = Exodiff
    input = boussinesq_square.i
    exodiff = boussinesq_square_out.e
    requirement = 'The system shall be able to solve mass, momentum, and energy incompressible Navier-Stokes equations with multiple threads.'
    min_threads = 2
    issues = '#15713'
    recover = false # Already testing recover in 'exo' and if we do this we'll get errors about recovering with a different number of threads. Also unsure if we support threaded recovery
  []
  [jac]
    type = PetscJacobianTester
    input = boussinesq_square.i
    run_sim = True
    difference_tol = 1e-6
    ratio_tol = 1e-7
    cli_args = "Mesh/gen/nx=4 Mesh/gen/ny=4 Outputs/active=''"
    requirement = 'The system shall have an accurate Jacobian provided by automatic differentiation when computing the Boussinesq approximation.'
  []
  [exo_stab]
    type = Exodiff
    input = boussinesq_stabilized.i
    exodiff = boussinesq_stabilized_out.e
    requirement = 'The system shall be able to support SUPG and PSPG stabilization of the incompressible Navier Stokes equations including the Boussinesq approximation.'
  []
  [threaded_exo_stab]
    type = Exodiff
    input = boussinesq_stabilized.i
    exodiff = boussinesq_stabilized_out.e
    requirement = 'The system shall be able to solve stablized mass, momentum, and energy incompressible Navier-Stokes equations with multiple threads.'
    min_threads = 2
    issues = '#15713'
    recover = false # Already testing recover in 'exo_stab' and if we do this we'll get errors about recovering with a different number of threads. Also unsure if we support threaded recovery
  []
  [jac_stab]
    type = PetscJacobianTester
    input = boussinesq_stabilized.i
    run_sim = True
    difference_tol = 1e-5
    ratio_tol = 3e-7
    cli_args = "Mesh/gen/nx=8 Mesh/gen/ny=8 Outputs/active='' -snes_test_err 1e-9"
    requirement = 'The system shall have an accurate Jacobian provided by automatic differentiation when computing the Boussinesq approximation with SUPG and PSPG stabilization.'
    method = "!dbg" # this problem is highly nonlinear and takes ~21 nonlinear iterations to solve in serial. Hence this is a relatively long test
  []
  [exo_stab_action]
    type = 'Exodiff'
    input = 'boussinesq_stabilized_action.i'
    exodiff = 'boussinesq_stabilized_out.e'
    prereq = 'exo_stab'
    issues = '#15159'
    requirement = 'The system shall be able to reproduce results of incompressible Navier-Stokes with Boussinesq approximation using a customized and condensed action syntax.'
    recover = false # We use the same output as exo_stab
  []
  [threaded_exo_stab_action]
    type = 'Exodiff'
    input = 'boussinesq_stabilized_action.i'
    exodiff = 'boussinesq_stabilized_out.e'
    requirement = 'The system shall be able to solve mass, momentum, and energy incompressible Navier-Stokes equations with a custom action syntax using multiple threads.'
    min_threads = 2
    issues = '#15713'
    recover = false # We use the same output as exo_stab and also unsure if we support threaded recovery
  []
[]
