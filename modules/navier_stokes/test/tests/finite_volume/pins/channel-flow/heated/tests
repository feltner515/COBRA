[Tests]
  [heated]
    issues = '#16756 #19472 #21135'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and convection with the solid phase in a 2D channel'
    design = 'PINSFVEnergyAdvection.md NSFVAction.md'
    [fluid_only]
      type = 'Exodiff'
      input = 2d-rc-heated.i
      exodiff = rc-heated.e
      method = "!dbg"
      abs_zero = 1e-9
      detail = 'with a Cartesian geometry, only modeling the fluid phase,'
      valgrind = HEAVY
      cli_args = "Outputs/file_base='rc-heated'"
    []
    [rz]
      type = 'Exodiff'
      input = 2d-rc-heated.i
      exodiff = rc-heated-rz.e
      method = "!dbg"
      abs_zero = 2e-9
      detail = 'in rz geometry,'
      valgrind = HEAVY
      cli_args = "Problem/coord_type='rz' Problem/rz_coord_axis='x' Outputs/file_base='rc-heated-rz'"
    []
    [kappa]
      type = 'Exodiff'
      input = 2d-rc-heated-effective.i
      exodiff = rc-heated-effective.e
      method = "!dbg"
      abs_zero = 1e-9
      detail = 'with an effective diffusion coefficient,'
      valgrind = HEAVY
      cli_args = "Outputs/file_base='rc-heated-effective'"
    []
    [kappa-action]
      type = 'Exodiff'
      input = 2d-rc-heated-effective-action.i
      exodiff = rc-heated-effective-action.e
      method = "!dbg"
      abs_zero = 1e-9
      detail = 'with an effective diffusion coefficient and NSFVAction syntax,'
      valgrind = HEAVY
      cli_args = "Outputs/file_base='rc-heated-effective-action'"
    []
    [kappa-dirichlet]
      type = 'Exodiff'
      input = 2d-rc-heated-effective.i
      exodiff = rc-heated-effective-dirichlet.e
      method = "!dbg"
      abs_zero = 1e-9
      detail = 'with an effective diffusion coefficient and dirichlet inlet boundary condition for fluid temperature,'
      valgrind = HEAVY
      cli_args = "FVBCs/inactive=inlet-T Outputs/file_base='rc-heated-effective-dirichlet' "
                 "Mesh/gen/nx=6 Mesh/gen/ny=3"
    []
  []
  [solid-fluid]
    type = 'Exodiff'
    input = 2d-rc-heated.i
    exodiff = rc-heated-solid-fluid.e
    method = "!dbg"
    abs_zero = 1e-9
    issues = '#16756'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and convection with the solid phase in a 2D channel, modeling both fluid and solid temperature.'
    valgrind = HEAVY
    design = 'PINSFVEnergyAmbientConvection.md'
    cli_args = "Variables/inactive='' AuxVariables/inactive='T_solid' FVKernels/inactive='' "
               "FVBCs/inactive='' Outputs/file_base='rc-heated-solid-fluid'"
  []
  [solid-fluid-action]
    type = 'Exodiff'
    input = 2d-rc-heated-action.i
    exodiff = rc-heated-solid-fluid-action.e
    method = "!dbg"
    abs_zero = 1e-9
    issues = '#19472'
    design = 'NSFVAction.md'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and convection with the solid phase in a 2D channel using the NSFV action syntax.'
    valgrind = HEAVY
    cli_args = "Outputs/file_base='rc-heated-solid-fluid-action'"
  []
  [solid-fluid-block]
    type = 'Exodiff'
    input = 2d-rc-heated.i
    exodiff = rc-heated-solid-fluid-block.e
    method = "!dbg"
    abs_zero = 1e-9
    issues = '#16756'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and block-restricted convection.'
    valgrind = HEAVY
    design = 'PINSFVEnergyAmbientConvection.md'
    cli_args = "Variables/inactive='' AuxVariables/inactive='T_solid' FVKernels/inactive='' "
               "FVKernels/energy_convection/block='2' FVKernels/solid_energy_convection/block='2' "
               "FVKernels/energy_advection/advected_interp_method='upwind' FVBCs/inactive='' "
               "Outputs/file_base='rc-heated-solid-fluid-block'"
  []
  [solid-fluid-block-action]
    type = 'Exodiff'
    input = 2d-rc-heated-action.i
    exodiff = rc-heated-solid-fluid-block-action.e
    method = "!dbg"
    abs_zero = 1e-9
    issues = '#19472'
    design = 'NSFVAction.md'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and block-restricted convection with the solid phase in a 2D channel using the NSFV action syntax.'
    valgrind = HEAVY
    cli_args = "Outputs/file_base='rc-heated-solid-fluid-block-action' "
               "Modules/NavierStokesFV/ambient_convection_blocks='2' "
               "Modules/NavierStokesFV/energy_advection_interpolation='upwind' "
               "FVKernels/solid_energy_convection/block='2'"
  []
  [transient]
    type = 'Exodiff'
    input = 2d-transient.i
    exodiff = 2d-transient_out.e
    method = "!dbg"
    abs_zero = 1e-9
    issues = '#16756'
    requirement = 'The system shall be able to solve transient relaxations with fluid energy diffusion, advection and convection with the solid phase in a 2D channel, modeling both fluid and solid temperature.'
    valgrind = 'none'
    design = 'PINSFVEnergyTimeDerivative.md INSFVMomentumTimeDerivative.md'
  []
  [transient-action]
    type = 'Exodiff'
    input = 2d-transient-action.i
    exodiff = 2d-transient-action_out.e
    method = "!dbg"
    abs_zero = 1e-9
    issues = '#19472'
    design = 'NSFVAction.md'
    requirement = 'The system shall be able to run transient simulations with fluid energy diffusion, advection and convection with the solid phase in a 2D channel, modeling both fluid and solid temperature using the NSFV action syntax.'
    valgrind = 'none'
  []
  [boussinesq]
    type = 'Exodiff'
    input = 2d-rc-heated-boussinesq.i
    exodiff = rc-heated-boussinesq.e
    method = "!dbg"
    issues = '#16756'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and convection with the solid phase in a 2D channel with a Boussinesq approximation for the influence of temperature on density.'
    valgrind = HEAVY
    design = 'PINSFVMomentumBoussinesq.md'
    cli_args = "Outputs/file_base='rc-heated-boussinesq'"
  []
  [boussinesq-action]
    type = 'Exodiff'
    input = 2d-rc-heated-boussinesq-action.i
    exodiff = rc-heated-boussinesq-action.e
    method = "!dbg"
    issues = '#19472'
    design = 'NSFVAction.md'
    requirement = 'The system shall be able to solve for fluid energy diffusion, advection and convection with the solid phase in a 2D channel with a Boussinesq approximation using the NSFV action syntax.'
    valgrind = HEAVY
    cli_args = "Outputs/file_base='rc-heated-boussinesq-action'"
  []
[]
