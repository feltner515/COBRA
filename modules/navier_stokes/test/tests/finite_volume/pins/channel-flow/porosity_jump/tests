[Tests]
  issues = '#16756 #24498'
  design = 'navier_stokes/pinsfv.md'
  [smooth-jump]
    type = 'Exodiff'
    input = 2d-rc-epsjump.i
    exodiff = rc-smooth-epsjump.e
    method = "!dbg"
    requirement = 'The system shall be able to model a smooth porosity gradient in a 2D channel.'
    cli_args = "Outputs/file_base='rc-smooth-epsjump' ICs/inactive='porosity_1 porosity_2' Materials/inactive='jump smooth'"
  []
  [1d-discontinuous-jump-average-average]
    type = 'Exodiff'
    input = 1d-rc-epsjump.i
    exodiff = rc-discontinuous-1d-epsjump-average-average.e
    requirement = 'The system shall be able to model a discontinuous porosity jump in a 1D channel with average interpolation of velocity and advected quantity.'
    cli_args = "Outputs/file_base='rc-discontinuous-1d-epsjump-average-average' velocity_interp_method='average' advected_interp_method='average'"
  []
  [1d-discontinuous-jump-average-upwind]
    type = 'Exodiff'
    input = 1d-rc-epsjump.i
    exodiff = rc-discontinuous-1d-epsjump-average-upwind.e
    requirement = 'The system shall be able to model a discontinuous porosity jump in a 1D channel with average interpolation of velocity and upwinding of the advected quantity.'
    max_parallel = 1
    cli_args = "Outputs/file_base='rc-discontinuous-1d-epsjump-average-upwind' velocity_interp_method='average' advected_interp_method='upwind' Executioner/nl_abs_tol=1e-13"
  []
  [1d-discontinuous-jump-rc-average]
    type = 'Exodiff'
    input = 1d-rc-epsjump.i
    exodiff = rc-discontinuous-1d-epsjump-rc-average.e
    requirement = 'The system shall be able to model a discontinuous porosity jump in a 1D channel with Rhie Chow interpolation of velocity and averaging of the advected quantity.'
    cli_args = "Outputs/file_base='rc-discontinuous-1d-epsjump-rc-average' velocity_interp_method='rc' advected_interp_method='average' -pc_type lu -pc_factor_shift_type NONZERO"
  []
  [1d-discontinuous-jump-rc-upwind]
    type = 'Exodiff'
    input = 1d-rc-epsjump.i
    exodiff = rc-discontinuous-1d-epsjump-rc-upwind.e
    requirement = 'The system shall be able to model a discontinuous porosity jump in a 1D channel with Rhie Chow interpolation of velocity and upwinding of the advected quantity.'
    cli_args = "Outputs/file_base='rc-discontinuous-1d-epsjump-rc-upwind' velocity_interp_method='rc' advected_interp_method='upwind' -pc_type lu -pc_factor_shift_type NONZERO"
  []
  [discontinuous-jump]
    type = 'Exodiff'
    input = 2d-rc-epsjump.i
    exodiff = rc-discontinuous-epsjump.e
    method = "!dbg"
    requirement = 'The system shall be able to model a discontinuous porosity jump in a 2D channel.'
    recover = false
    max_parallel = 1
    cli_args = "Outputs/file_base='rc-discontinuous-epsjump' Materials/inactive='jump smooth'"
  []
  [reconstruct-porosity]
    type = 'Exodiff'
    input = 2d-rc-epsjump.i
    exodiff = reconstructed.e
    cli_args = "Outputs/file_base=reconstructed GlobalParams/porosity=smoothed_porosity UserObjects/rc/smoothing_layers=20 AuxVariables/active='' ICs/inactive='porosity_1 porosity_2 porosity_continuous'"
    requirement = 'The system shall exhibit a monotonic pressure profile when a number of reconstructions (essentially smoothing) are applied to the porosity.'
  []
  [reconstruct-error]
    type = RunException
    input = 2d-rc-epsjump.i
    cli_args = 'UserObjects/rc/smoothing_layers=1'
    expect_err = 'If we are reconstructing porosity, then the input porosity to this user object cannot be a Moose variable'
    requirement = 'The system shall error if the user attempts to create a reconstructed field from a variable.'
  []
  [automatic-jump-handling]
    requirement = 'The system shall be able to automatically impose a change in pressure in line with the Bernoulli equation at porosity jumps in'
    [1d]
      type = CSVDiff
      input = 'bernoulli-1d.i'
      csvdiff = 'bernoulli-1d_out.csv'
      detail = 'one dimension, using upwinding for advection and a Rhie-Chow interpolation of velocity'
    []
    [1d-average]
      type = CSVDiff
      input = 'bernoulli-1d.i'
      csvdiff = 'bernoulli-1d_out.csv'
      detail = 'one dimension, using central differencing for advection and velocity'
      cli_args = "advected_interp_method='average' velocity_interp_method='average'"
      prereq = 'automatic-jump-handling/1d'
    []
    [2d]
      type = CSVDiff
      input = 'bernoulli-2d.i'
      csvdiff = 'bernoulli-2d_out.csv'
      detail = 'two dimensions, using upwinding for advection and a Rhie-Chow interpolation of velocity'
    []
    [2d-average]
      type = CSVDiff
      input = 'bernoulli-2d.i'
      csvdiff = 'bernoulli-2d_out.csv'
      detail = 'two dimensions, using central differencing for advection and velocity'
      cli_args = "advected_interp_method='average' velocity_interp_method='average'"
      prereq = 'automatic-jump-handling/2d'
    []
    [2d-action]
      type = CSVDiff
      input = 'bernoulli-2d-action.i'
      csvdiff = 'bernoulli-2d-action_out.csv'
      detail = 'two dimensions using compact action syntax, upwinding for advection, and a Rhie-Chow interpolation of velocity'
    []
  []
  [has-porosity-jump-aux]
    type = Exodiff
    input = bernoulli-1d.i
    exodiff = bernoulli-1d_out.e
    requirement = 'The system shall be able to mark what elements have porosity jump faces using an auxiliary kernel.'
    prereq = 'automatic-jump-handling/1d-average'
  []
  [bernoulli-with-parsed-function]
    type = CSVDiff
    input = bernoulli-1d-parsed-function.i
    csvdiff = bernoulli-1d-parsed-function_out.csv
    requirement = 'The system shall be able to recognize discontinuities in parsed functions at subdomain changes and produce the correct Bernoulli pressure drop as a consequence.'
  []
  [bernoulli-with-parsed-function-two-term]
    type = CSVDiff
    input = bernoulli-1d-parsed-function.i
    csvdiff = bernoulli-1d-parsed-function_out.csv
    cli_args = 'Variables/pressure/allow_two_term_expansion_on_bernoulli_faces=true'
    requirement = 'The system shall be able to use two-term expansion to compute the face pressure on the downstream side on a porosity jump face.'
  []
  [bernoulli-with-functor-material]
    type = CSVDiff
    input = bernoulli-1d-functor-material.i
    csvdiff = bernoulli-1d-functor-material_out.csv
    requirement = 'The system shall be able to recognize discontinuities in functor material properties and produce the correct Bernoulli pressure drop as a consequence.'
  []
[]
