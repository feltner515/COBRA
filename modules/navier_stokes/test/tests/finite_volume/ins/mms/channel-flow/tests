[Tests]
  issues = '#15640'
  design = 'navier_stokes/insfv.md'
  [1d-average]
    type = PythonUnitTest
    input = test.py
    test_case = Test1DAverage
    method = '!dbg'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in one dimension with prescribed inlet velocity and outlet pressure and implicit zero gradient boundary conditions elsewhere, and demonstrate second order convergence in both velocity and pressure when using an average interpolation scheme for the velocity.'
    required_python_packages = 'pandas matplotlib'
  []
  [2d-average]
    type = PythonUnitTest
    input = test.py
    test_case = Test2DAverage
    method = '!dbg'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in two dimensions with prescribed inlet velocity and outlet pressure, free slip along the walls, and implicit zero gradient boundary conditions elsewhere, and demonstrate second order convergence in both velocity and pressure when using an average interpolation scheme for the velocity.'
    required_python_packages = 'pandas matplotlib'
  []
  [2d-rc]
    type = PythonUnitTest
    input = test.py
    test_case = Test2DRC
    method = '!dbg'
    min_parallel = 16
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in two dimensions with prescribed inlet velocity and outlet pressure, free slip along the walls, and implicit zero gradient boundary conditions elsewhere, and demonstrate second order convergence in both velocity and pressure when using a Rhie-Chow interpolation scheme for the velocity.'
    heavy = 'true'
    valgrind = 'none'
    required_python_packages = 'pandas matplotlib'
    max_time = 600
  []
  [plane-poiseuille-rc]
    type = PythonUnitTest
    input = test.py
    test_case = TestPlanePoiseuilleRC
    method = '!dbg'
    requirement = 'The system shall demonstrate global second order convergence for all variables when using an RC interpolation for the velocity and a two term Taylor series expansion for face values on non-Dirichlet boundaries.'
    required_python_packages = 'pandas matplotlib'
    min_parallel = 16
    heavy = true
  []
  [plane-poiseuille-average-first]
    type = PythonUnitTest
    input = test.py
    test_case = TestPlanePoiseuilleAverageFirst
    method = '!dbg'
    required_python_packages = 'pandas matplotlib'
    min_parallel = 16
    heavy = true
    requirement = 'The system shall demonstrate global second order convergence for all variables when using an average interpolation for the velocity and a one term Taylor series expansion for face values on non-Dirichlet boundaries.'
  []
  [plane-poiseuille-rc-first]
    type = PythonUnitTest
    input = test.py
    test_case = TestPlanePoiseuilleRCFirst
    method = '!dbg'
    requirement = 'The system shall demonstrate global second order convergence for all variables when using an RC interpolation for the velocity and a one term Taylor series expansion for face values on non-Dirichlet boundaries.'
    required_python_packages = 'pandas matplotlib'
    min_parallel = 16
    heavy = true
  []
  [2d-average-with-temp]
    type = PythonUnitTest
    input = test.py
    test_case = Test2DAverageTemp
    method = '!dbg'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations, including energy, using an average interpolation for the velocity, with a mix of Dirichlet and zero-gradient boundary conditions for each variable, and demonstrate second order convergence for each variable.'
    heavy = 'true'
    valgrind = 'none'
    required_python_packages = 'pandas matplotlib'
  []
  [2d-rc-with-temp]
    type = PythonUnitTest
    input = test.py
    test_case = Test2DRCTemp
    method = '!dbg'
    min_parallel = 16
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations, including energy, using a Rhie-Chow interpolation for the velocity, with a mix of Dirichlet and zero-gradient boundary conditions for each variable, and demonstrate second order convergence for each variable.'
    heavy = 'true'
    valgrind = 'none'
    required_python_packages = 'pandas matplotlib'
  []
[]
