[Tests]
  design = 'navier_stokes/index.md NSFVAction.md'
  issues = '#15640 #19472'
  [exo]
    type = 'Exodiff'
    input = 'lid-driven.i'
    exodiff = 'lid-driven_out.e'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in a lid-driven cavity using the finite volume method.'
  []
  [exo-action]
    type = 'Exodiff'
    input = 'lid-driven-action.i'
    exodiff = 'lid-driven-action_out.e'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in a lid-driven cavity using the finite volume Navier-Stokes action.'
  []
  [point-pressure]
    type = 'Exodiff'
    input = 'lid-driven.i'
    exodiff = 'lid-driven-point-pressure.e'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in a lid-driven cavity by fixing the point value of the pressure at a certain coordinate.'
    cli_args = "FVKernels/mean_zero_pressure/type='FVPointValueConstraint' FVKernels/mean_zero_pressure/point='0.001 0.099 0.0' Outputs/file_base='lid-driven-point-pressure'"
  []
  [point-pressure-action]
    type = 'Exodiff'
    input = 'lid-driven-action.i'
    exodiff = 'lid-driven-point-pressure-action.e'
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in a lid-driven cavity by fixing the point value of the pressure at a certain coordinate using the NSFV action syntax.'
    cli_args = "Modules/NavierStokesFV/pinned_pressure_type=point-value Modules/NavierStokesFV/pinned_pressure_point='0.001 0.099 0.0' Outputs/file_base='lid-driven-point-pressure-action'"
  []
  [point-pressure-action-error]
    type = 'RunException'
    input = 'lid-driven-action.i'
    requirement = 'The system shall throw an error if the user requests integral value pressure pinning while specifying a point for the pin.'
    expect_err = "This parameter should not be given by the user with the corresponding pinned_pressure_type setting!"
    cli_args = "Modules/NavierStokesFV/pinned_pressure_point='0.001 0.099 0.0'"
  []
  [nonsingular]
    type = 'RunApp'
    input = 'lid-driven.i'
    cli_args = 'Mesh/gen/nx=4 Mesh/gen/ny=4 Outputs/exodus=false -pc_type svd -pc_svd_monitor'
    expect_out = '0 of 49 singular values'
    absent_out = '\s+[1-9]+[0-9]* of 49 singular values'
    requirement = 'The system shall be able to solve an incompressible Navier-Stokes problem with dirichlet boundary conditions for all the normal components of velocity, using the finite volume method, and have a nonsingular system matrix.'
  []
  [jacobian]
    type = 'PetscJacobianTester'
    input = 'transient-lid-driven-with-energy.i'
    cli_args = 'Mesh/gen/nx=2 Mesh/gen/ny=2 Executioner/num_steps=1'
    requirement = 'The system shall be able to compute a perfect Jacobian when solving a lid-driven incompressible Navier-Stokes problem with the finite volume method.'
    run_sim = True
    ratio_tol = 1e-7
    difference_tol = 1e-7
  []
  [with-temp]
    type = 'Exodiff'
    input = 'lid-driven-with-energy.i'
    exodiff = 'lid-driven-with-energy_out.e'
    requirement = 'The system shall be able to transport scalar quantities using the simultaneously calculated velocity field from the incompressible Navier Stokes equations.'
    method = '!dbg'
    valgrind = HEAVY
    cli_args = '-pc_type lu -pc_factor_shift_type NONZERO'
  []
  [with-temp-action]
    type = 'Exodiff'
    input = 'lid-driven-with-energy-action.i'
    exodiff = 'lid-driven-with-energy-action_out.e'
    requirement = 'The system shall be able to get the same result as the enthalpy transport example using the NSFVAction to set up the run.'
    method = '!dbg'
    valgrind = HEAVY
    cli_args = '-pc_type lu -pc_factor_shift_type NONZERO'
  []
  [transient-with-temp]
    type = 'Exodiff'
    input = 'transient-lid-driven-with-energy.i'
    exodiff = 'transient-lid-driven-with-energy_out.e'
    requirement = 'The system shall be able to transport scalar quantities using the simultaneously calculated velocity field from the transient incompressible Navier Stokes equations.'
    method = '!dbg'
    valgrind = 'none'
    cli_args = '-pc_type lu -pc_factor_shift_type NONZERO'
  []
  [quiescent]
    type = 'Exodiff'
    input = 'rz-gravity-quiescent-fluid.i'
    exodiff = 'rz-gravity-quiescent-fluid_out.e'
    requirement = 'The system shall yield a quiescent fluid in an axisymmetric coordinate system with a gravitational force applied and Rhie-Chow interpolation used for the velocity field.'
  []
  [quiescent_jac]
    type = PetscJacobianTester
    run_sim = True
    input = rz-gravity-quiescent-fluid.i
    prereq = quiescent
    cli_args = 'Mesh/gen/nx=3 Mesh/gen/ny=3 Executioner/automatic_scaling=true Executioner/off_diagonals_in_auto_scaling=true'
    requirement = 'The system shall compute an accurate Jacobian when a scaling factor is applied to a scalar variable.'
    difference_tol = 1e-7
  []
[]
