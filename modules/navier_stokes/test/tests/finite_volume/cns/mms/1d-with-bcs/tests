[Tests]
  issues = '#16758'
  [1d-free-flow-hllc]
    type = PythonUnitTest
    input = test.py
    test_case = Test1DFreeFlowHLLC
    requirement = 'The system shall exhibit first order convergence for all variables for the free-flow Euler equations with added artificial diffusion using a HLLC discretization scheme for the advection flux and with specified temperature and momentum at one boundary and specified pressure at another boundary.'
    required_python_packages = 'pandas matplotlib'
    method = "!dbg"
    design = 'CNSFVHLLCBase.md'
  []
  [1d-porous-hllc]
    requirement = 'The system shall exhibit first order convergence for all variables for the porous Euler equations using a HLLC discretization scheme for the advection flux and with specified temperature and momentum/velocity at one boundary and specified pressure at another boundary with'
    design = 'PCNSFVHLLC.md'
    [constant]
      type = PythonUnitTest
      input = test.py
      test_case = Test1DPorousHLLC
      required_python_packages = 'pandas matplotlib'
      method = "!dbg"
      detail = 'constant porosity'
    []
    [varying]
      type = PythonUnitTest
      input = test.py
      test_case = Test1DVaryingEpsPorousHLLC
      required_python_packages = 'pandas matplotlib'
      method = "!dbg"
      detail = 'varying porosity'
    []
  []
  [primitive_basic_kurganov_tadmor]
    requirement = 'The system shall be able to use a primitive variable set and compute intercell fluxes using a Kurganov-Tadmor scheme'
    design = 'PCNSFVKT.md'
    [central_difference]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DPorousKTPrimitiveCD
      required_python_packages = 'pandas matplotlib'
      detail = 'when using central differencing to interpolate cell center values to faces and display second order convergence'
      method = "!dbg"
    []
    [upwind]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DPorousKTPrimitiveUpwind
      required_python_packages = 'pandas matplotlib'
      detail = 'when using directional upwinding to interpolate cell center values to faces and display first order convergence'
      method = "!dbg"
    []
    [vanLeer]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DPorousKTPrimitiveVanLeer
      required_python_packages = 'pandas matplotlib'
      detail = 'when using linear interpolation of cell center values to faces with Van-Leer limiting and display at least second order convergence'
      method = "!dbg"
    []
  []
  [conserved_basic_kurganov_tadmor]
    requirement = 'The system shall be able to use a conserved variable set and compute intercell fluxes using a Kurganov-Tadmor scheme'
    design = 'PCNSFVKT.md'
    [central_difference]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DPorousKTConservedCD
      required_python_packages = 'pandas matplotlib'
      detail = 'when using central differencing to interpolate cell center values to faces and display second order convergence'
      method = "!dbg"
    []
    [upwind]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DPorousKTConservedUpwind
      required_python_packages = 'pandas matplotlib'
      detail = 'when using directional upwinding to interpolate cell center values to faces and display first order convergence'
      method = "!dbg"
    []
    [vanLeer]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DPorousKTConservedVanLeer
      required_python_packages = 'pandas matplotlib'
      detail = 'when using linear interpolation of cell center values to faces with Van-Leer limiting and display at least second order convergence'
      method = "!dbg"
    []
  []
  [primitive_basic_kurganov_tadmor_varying_porosity_function]
    requirement = 'The system shall be able to solve a problem with continuously varying porosity provided through a function object, using a primitive variable set, and compute intercell fluxes using a Kurganov-Tadmor (KT) scheme with the KT Method for computing omega'
    design = 'PCNSFVKT.md'
    [central_difference]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKTPrimitiveCD
      required_python_packages = 'pandas matplotlib'
      detail = 'when using central differencing to interpolate cell center values to faces and display second order convergence'
      method = "!dbg"
    []
    [upwind]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKTPrimitiveUpwind
      required_python_packages = 'pandas matplotlib'
      detail = 'when using directional upwinding to interpolate cell center values to faces and display first order convergence'
      method = "!dbg"
    []
    [vanLeer]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKTPrimitiveVanLeer
      required_python_packages = 'pandas matplotlib'
      detail = 'when using linear interpolation of cell center values to faces with Van-Leer limiting and display at least second order convergence'
      method = "!dbg"
    []
  []
  [primitive_basic_knp_varying_porosity_function]
    requirement = 'The system shall be able to solve a problem with continuously varying porosity provided through a function object, using a primitive variable set, and compute intercell fluxes using a Kurganov-Tadmor scheme with the Kurganov-Noelle-Petrova method for computing omega'
    design = 'PCNSFVKT.md'
    [central_difference]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKNPPrimitiveCD
      required_python_packages = 'pandas matplotlib'
      detail = 'when using central differencing to interpolate cell center values to faces and display second order convergence'
      method = "!dbg"
    []
    [upwind]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKNPPrimitiveUpwind
      required_python_packages = 'pandas matplotlib'
      detail = 'when using directional upwinding to interpolate cell center values to faces and display first order convergence'
      method = "!dbg"
    []
    [vanLeer]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKNPPrimitiveVanLeer
      required_python_packages = 'pandas matplotlib'
      detail = 'when using linear interpolation of cell center values to faces with Van-Leer limiting and display at least second order convergence'
      method = "!dbg"
    []
  []
  [mixed_basic_kurganov_tadmor_varying_porosity_function]
    requirement = 'The system shall be able to solve a problem with continuously varying porosity provided through a function object, using a mixed variable set, and compute intercell fluxes using a Kurganov-Tadmor scheme'
    design = 'PCNSFVKT.md'
    [central_difference]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKTMixedCD
      required_python_packages = 'pandas matplotlib'
      detail = 'when using central differencing to interpolate cell center values to faces and display second order convergence'
      method = "!dbg"
    []
    [upwind]
      type = PythonUnitTest
      input = test.py
      test_case = TestBasic1DVaryingPorousKTMixedUpwind
      required_python_packages = 'pandas matplotlib'
      detail = 'when using directional upwinding to interpolate cell center values to faces and display first order convergence'
      method = "!dbg"
    []
  []
  [sources_give_hllc_problems_irregular]
    requirement = 'The system displays issues when trying to solve hyperbolic equations with sources when using a Godunov method with HLLC approximate Riemann solver on an irregular grid'
    design = 'CNSFVHLLCBase.md'
    [hllc_with_volume_source]
      type = Exodiff
      input = 'straight-channel-hllc.i'
      exodiff = straight-channel-hllc_out.e
      detail = 'when the source has a cell-centered volumetric discretization'
      method = "!dbg"
    []
  []
  [sources_give_hllc_problems_regular]
    requirement = 'On a regular grid, using a HLLC scheme to calculate inter-cell fluxes, the system shall show, via the momentum variable'
    design = 'CNSFVHLLCBase.md'
    [conserved]
      type = Exodiff
      input = 'regular-straight-channel.i'
      exodiff = 'regular-straight-channel_out.e'
      detail = 'conservation of mass when no sources are present'
      cli_args = "FVKernels/inactive='drag'"
      method = "!dbg"
    []
    [non_conserved]
      input = 'regular-straight-channel.i'
      exodiff = 'regular-straight-channel-sources_out.e'
      detail = 'violation of conservation of mass when sources are present'
      type = Exodiff
      cli_args = 'Outputs/file_base=regular-straight-channel-sources_out'
      method = "!dbg"
    []
    [non_conserved_finer]
      input = 'regular-straight-channel.i'
      exodiff = 'regular-straight-channel-sources-nx-150_out.e'
      detail = 'lesser violation of conservation of mass when sources are present and the mesh is refined'
      type = Exodiff
      cli_args = 'Outputs/file_base=regular-straight-channel-sources-nx-150_out Mesh/gen_mesh/nx=150'
      method = "!dbg"
    []
  []
  [pwcnsfv]
    type = PythonUnitTest
    input = test.py
    test_case = PWCNSFV
    required_python_packages = 'pandas matplotlib'
    method = "!dbg"
    requirement = 'The system shall demonstrate first order convergence rates for pressure and superficial velocity when using an upwind interpolation for advected quantities in a weakly compressible formulation of the mass and momentum Euler equations.'
    issues = '#18215'
    design = 'PINSFVMomentumAdvection.md'
  []
[]
