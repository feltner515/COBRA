# Uncomment on of the following `final_mg` definition to run
# the corresponding demonstration.

[Mesh]
   # Select the final generator to be used for this run
  ## PCCMG Demo
  #final_generator = 'hex_1'
  ## PatternedHexMeshGenerator Demo for Assembly
  #final_generator = 'pattern_assm'
  ## Simple Hex Assembly Demo
  #final_generator = 'hex_simple'
  ## Side Trimming Demo
  #final_generator = 'pattern_assm_peri_trim'
  ## Assembly Peripheral Modification Demo
  #final_generator = 'pattern_assm_peri_mod'
  ## Adaptive Assembly Demo
  #final_generator = 'adaptive_assm'
  ## Core Mesh Generation Demo
  #final_generator = 'pattern_core'
  ## Core Peripheral Ring Demo
  #final_generator = 'pr'
  ## Core Peripheral Triagular Ring Demo
  #final_generator = 'pt'
  ## Core Azimuthal Trimming Demo
  #final_generator = 'core_trim'
  ## Extrusion Demo
  final_generator = 'core_ext'

  # PCCMG to generate a pin cell
  [hex_1]
    type = PolygonConcentricCircleMeshGenerator
    # General parameters
    num_sides = 6
    num_sectors_per_side = '4 4 4 4 4 4'
    polygon_size = 5.0
    # Ring regions parameters
    ring_radii = 4.0
    ring_intervals = 2
    ring_block_ids = '10 15'
    ring_block_names = 'center_tri center'
    preserve_volumes = on
    # Background region parameters
    background_intervals = 2
    background_block_ids = 20
    background_block_names = background
#    # Optional Duct regions parameters
#    duct_sizes = '4.5 4.8'
#    duct_sizes_style = apothem
#    duct_block_ids = '22 24'
#    duct_block_names = 'duct_in duct_out'
#    duct_intervals = '1 2'
  []

  # PHMG to combine pins into an assembly
  [pattern_assm]
    type = PatternedHexMeshGenerator
    inputs = 'hex_1'
    pattern = '0 0;
              0 0 0;
               0 0'
    hexagon_size = 16
    # Background region parameters
    background_intervals = 2
    background_block_id = 80
    background_block_name = hex_background
#    # Optional Duct regions parameters
#    duct_sizes = '15.0 15.5'
#    duct_sizes_style = apothem
#    duct_block_ids = '82 84'
#    duct_block_names = 'assm_duct_in assm_duct_out'
#    duct_intervals = '1 2'
    # Advanced option
    deform_non_circular_region = false
  []

  # HMT to remove the outmost layer of the assembly to expose half pins
  [pattern_assm_peri_trim]
    type = HexagonMeshTrimmer
    input = pattern_assm
    trim_peripheral_region = '1 1 1 1 1 1'
    peripheral_trimming_section_boundary = peripheral_section
  []

  # PHPM to modify the outmost layer of the assembly to specify
  # the node number on the external boundary and facilitate stitching disimilar assemblies
  [pattern_assm_peri_mod]
    type = PatternedHexPeripheralModifier
    input = pattern_assm
    input_mesh_external_boundary = 10000
    new_num_sector = 10
    num_layers = 2
  []

  # HCCABMG to generate a PCCMG-style reflector/control drum assembly compatible with
  # ordinary assemblies generated by PHMG
  [adaptive_assm]
    type = HexagonConcentricCircleAdaptiveBoundaryMeshGenerator
    num_sectors_per_side = '4 4 4 4 4 4'
    background_intervals = 2
    hexagon_size = 16
    sides_to_adapt = '1 2 3'
    meshes_to_adapt_to = 'pattern_assm pattern_assm pattern_assm'
  []

  # SHG to generate simple (coarse) assembly mesh
  [hex_simple]
    type = SimpleHexagonGenerator
    hexagon_size = 16
    # Options: TRI, QUAD, HYBRID
    element_type = TRI
    # Optional subdomain id/name
    block_id = '100'
    block_name = 'hexagon'
  []

  # PHMG to combine assembly mesh into a core mesh
  [pattern_core]
    type = PatternedHexMeshGenerator
    inputs = 'pattern_assm adaptive_assm'
    pattern_boundary = none
    # Set as true to tell MOOSE that inputs have meshes made by PatternedHexMeshGenerator
    # Set as false if the inputs are made by SimpleHexagonGenerator
    generate_core_metadata = true
    pattern = '0 0 0;
              0 0 0 0;
             0 0 0 0 1;
              0 0 0 0;
               0 0 0'
  []

  # PRMG to add a circular peripheral region for the core mesh
  [pr]
    type = PeripheralRingMeshGenerator
    input = pattern_core
    peripheral_layer_num = 3
    peripheral_ring_radius = 100.0
    input_mesh_external_boundary = 10000
    peripheral_ring_block_id = 300
    peripheral_ring_block_name = reactor_ring
  []

  # PTMG to add a circular peripheral region for the core mesh
  [pt]
    type = PeripheralTriangleMeshGenerator
    input = pattern_core
    peripheral_ring_radius = 100.0
    peripheral_ring_num_segments = 100
    desired_area = 20
  []

  # HMT to trim an azimuthal slice from the full 2D core mesh
  [core_trim]
    type = HexagonMeshTrimmer
    input = pr
    center_trim_starting_index = 0
    center_trim_ending_index = 2
    center_trimming_section_boundary = symmetric
  []

  # AEG to extrude the 2D mesh into 3D
  [core_ext]
    type = AdvancedExtruderGenerator
    input = core_trim
    heights = '30 60 30'
    num_layers = '2 3 2'
    direction = '0 0 1'
    # Optional subdomain swap
    subdomain_swaps = '10 100 15 150 20 150 80 150 300 150;
                        ;
                       10 200 15 250 20 250 80 250 300 250'
  []
[]
