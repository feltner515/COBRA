[Tests]
  design = 'Diffusion.md'
  issues = 'libmesh#1985'
  [./test_smp]
    type = 'Exodiff'
    input = 'simple_diffusion.i'
    exodiff = 'simple_diffusion_out.e'
    expect_out = "0 of 11"
    requirement = 'The SMP Jacobian for a problem with a hanging-node shall be non-singular'
  [../]
  [./test_fd_coloring]
    type = 'Exodiff'
    input = 'simple_diffusion.i'
    exodiff = 'simple_diffusion_out.e'
    prereq = 'test_smp'
    expect_out = "0 of 11"
    cli_args = "Preconditioning/pre/type=FDP"
    allow_warnings = True
    requirement = 'The colored finite difference Jacobian for a problem with a hanging-node shall be non-singular'
  [../]
  [./test_fd_standard]
    type = 'Exodiff'
    input = 'simple_diffusion.i'
    exodiff = 'simple_diffusion_out.e'
    prereq = 'test_fd_coloring'
    expect_out = "0 of 11"
    cli_args = "Preconditioning/pre/type=FDP Preconditioning/pre/finite_difference_type=standard"
    allow_warnings = True
    requirement = 'The standard finite difference Jacobian for a problem with a hanging-node shall be non-singular'
  [../]
  [./test_mf]
    type = 'Exodiff'
    input = 'simple_diffusion.i'
    exodiff = 'simple_diffusion_out.e'
    prereq = 'test_fd_standard'
    cli_args = "-snes_mf_operator -pc_type asm"
    requirement = 'A matrix-free operator shall be able to solve the hanging-node problem, indicating it is non-singular'
  [../]
  [./test_smp_jacobian]
    type = PetscJacobianTester
    input = 'simple_diffusion.i'
    run_sim = True
    cli_args = '-snes_test_jacobian_view'
    requirement = 'The SMP Jacobian shall be perfect for the hanging-node problem'
  [../]
  [test_ad_smp_jacobian]
    type = PetscJacobianTester
    input = 'ad_simple_diffusion.i'
    run_sim = True
    requirement = 'The system shall compute a perfect Jacobian via automatic differentiation for a hanging-node problem and simultaneously handle automatic differentiation objects that do not actually have nonlinear variable dependence.'
    issues = 'libmesh#1985 #15732'
  []
[]
