[Tests]
  design = 'NonlinearSystem.md'
  issues = '#14397'
  [residual-based]
  requirement = 'The system shall be able to conduct residual based automatic scaling such that the largest residual vector component corresponding to each variable has magnitude unity'
    [one-var]
      type = Exodiff
      input = residual-based.i
      exodiff = residual-based_out.e
      expect_out = 'Automatic scaling factors:\s+u:\s+2\.2.*e-05'
      detail = 'in a one variable problem'
      petsc_version = '>=3.9.0'
    []
    [two-var]
      type = Exodiff
      input = residual-based-two-var.i
      exodiff = residual-based-two-var_out.e
      detail = 'and in a two variable problem.'
      expect_out = 'Automatic scaling factors:\s+u:\s+1\.23.*e-05\s+v:\s+999'
      petsc_version = '>=3.9.0'
    []
  []
  [jacobian-based]
  requirement = 'The system shall be able to conduct jacobian based automatic scaling such that the largest jacobian diagonal component corresponding to each variable has magnitude unity'
    [one-var]
      type = Exodiff
      input = residual-based.i
      exodiff = jacobian.e
      cli_args = 'Executioner/resid_vs_jac_scaling_param=0 Outputs/file_base=jacobian'
      expect_out = 'Automatic scaling factors:\s+u:\s+0\.00967'
      detail = 'in a one variable problem'
      petsc_version = '>=3.9.0'
    []
    [two-var]
      type = Exodiff
      input = residual-based-two-var.i
      exodiff = two-var-jacobian.e
      cli_args = 'Executioner/resid_vs_jac_scaling_param=0 Outputs/file_base=two-var-jacobian'
      expect_out = 'Automatic scaling factors:\s+u:\s+0\.00714[0-9]*\s+v:\s+0\.0499'
      detail = 'and in a two variable problem'
      petsc_version = '>=3.9.0'
    []
  []
[]
