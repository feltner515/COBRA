[Tests]
  design = 'CSVReader.md'

  [read]
    type = CSVDiff
    input = read.i
    csvdiff = 'read_out_reader.csv'

    issues = '#9167'
    requirement = 'The system shall support the ability to read a comma separated file into an '
                  'object and make it accessible through easy to use standard C++ containers.'
  []
  [parallel]
    # Tests that data that CSV data that is read on processor 0 is broadcast to other ranks. This
    # uses a test object to check that the data is broadcast, which can't be done with file IO
    # because reading and writing happens on rank 0.
    type = RunApp
    input = read.i
    cli_args = 'UserObjects/tester/rank=1 Outputs/csv=false'
    min_parallel = 2
    recover = false

    issues = '#9167'
    requirement = 'The system shall support the ability to read CSV data on only one processor and '
                  'broadcast it to other ranks.'
  []
  [tester_fail]
    type = RunException
    input = read.i
    cli_args = "UserObjects/tester/rank=1 UserObjects/tester/gold='1 2 3' Outputs/csv=false"
    min_parallel = 2
    expect_err = "The supplied gold data does not match the VPP data on the given rank."
    recover = false

    issues = '#9167'
    requirement = 'The system shall error if the broadcast CSV data does not match on all ranks in a '
                  'parallel job.'
  []

  [read_preic]
    type = CSVDiff
    input = read_preic.i
    csvdiff = 'read_preic_out_reader.csv'

    issues = '#14785'
    requirement = 'The system shall support the ability to read a comma separated file into an '
                  'object prior to initial setup.'
  []
[]
