[Tests]
  issues = '#852'
  design = 'source/auxkernels/PenetrationAux.md'

  [./pl_test1]
    type = 'Exodiff'
    input = 'pl_test1.i'
    exodiff = 'pl_test1_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, disjoint surfaces of a moving interface in 2D."
  [../]

  [./pl_test1q]
    type = 'Exodiff'
    input = 'pl_test1q.i'
    exodiff = 'pl_test1q_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, disjoint surfaces of a moving interface in 2D using second order elements."
  [../]

  [./pl_test1tt]
    type = 'Exodiff'
    input = 'pl_test1tt.i'
    exodiff = 'pl_test1tt_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, disjoint surfaces of a moving interface in 2D using a tangential tolerance of for the distance."
  [../]

  [./pl_test1qtt]
    type = 'Exodiff'
    input = 'pl_test1qtt.i'
    exodiff = 'pl_test1qtt_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, disjoint surfaces of a moving interface in 2D using a tangential tolerance of for the distance and second order elements."
  [../]

  [./pl_test2]
    type = 'Exodiff'
    input = 'pl_test2.i'
    exodiff = 'pl_test2_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, overlapping surfaces of a moving interface in 2D."
  [../]

  [./pl_test2q]
    type = 'Exodiff'
    input = 'pl_test2q.i'
    exodiff = 'pl_test2q_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, overlapping surfaces of a moving interface in 2D with second order elements."
  [../]

  [./pl_test2tt]
    type = 'Exodiff'
    input = 'pl_test2tt.i'
    exodiff = 'pl_test2tt_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, overlapping surfaces of a moving interface in 2D using a tangential tolerance for the distance."
  [../]

  [./pl_test2qtt]
    type = 'Exodiff'
    input = 'pl_test2qtt.i'
    exodiff = 'pl_test2qtt_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between two parallel, overlapping surfaces of a moving interface in 2D using a tangential tolerance for the distance and second order elements."
  [../]

  [./pl_test3]
    type = 'Exodiff'
    input = 'pl_test3.i'
    exodiff = 'pl_test3_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D."
  [../]

  [./pl_test3q]
    type = 'Exodiff'
    input = 'pl_test3q.i'
    exodiff = 'pl_test3q_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D and second order elements."
  [../]

  [./pl_test3tt]
    type = 'Exodiff'
    input = 'pl_test3tt.i'
    exodiff = 'pl_test3tt_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D using a tangential tolerance of for the distance."
  [../]

  [./pl_test3qtt]
    type = 'Exodiff'
    input = 'pl_test3qtt.i'
    exodiff = 'pl_test3qtt_out.e'
    abs_zero = 1e-09
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D using a tangential tolerance of for the distance and second order elements."
  [../]

  [./pl_test3ns]
    type = 'Exodiff'
    input = 'pl_test3ns.i'
    exodiff = 'pl_test3ns_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D using normal smoothing for the distance."
  [../]

  [./pl_test3qns]
    type = 'Exodiff'
    input = 'pl_test3qns.i'
    exodiff = 'pl_test3qns_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D using normal smoothing for the distance and second order elements."
  [../]

  [./pl_test3nns]
    type = 'Exodiff'
    input = 'pl_test3nns.i'
    exodiff = 'pl_test3nns_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D using nodal normal based smoothing for the distance."
  [../]

  [./pl_test3qnns]
    type = 'Exodiff'
    input = 'pl_test3qnns.i'
    exodiff = 'pl_test3qnns_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and convex disjoint surfaces of a moving interface in 2D using nodal normal based smoothing for the distance and second order elements."
  [../]

  [./pl_test4]
    type = 'Exodiff'
    input = 'pl_test4.i'
    exodiff = 'pl_test4_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D."
  [../]

  [./pl_test4q]
    type = 'Exodiff'
    input = 'pl_test4q.i'
    exodiff = 'pl_test4q_out.e'
    abs_zero = 1e-09
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using second order elements."
  [../]

  [./pl_test4tt]
    type = 'Exodiff'
    input = 'pl_test4tt.i'
    exodiff = 'pl_test4tt_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using a tangential tolerance of for the distance."
  [../]

  [./pl_test4qtt]
    type = 'Exodiff'
    input = 'pl_test4qtt.i'
    exodiff = 'pl_test4qtt_out.e'
    abs_zero = 1e-09
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using a tangential tolerance of for the distance and second order elements."
  [../]

  [./pl_test4ns]
    type = 'Exodiff'
    input = 'pl_test4ns.i'
    exodiff = 'pl_test4ns_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using normal smoothing for the distance."
  [../]

  [./pl_test4qns]
    type = 'Exodiff'
    input = 'pl_test4qns.i'
    exodiff = 'pl_test4qns_out.e'
    abs_zero = 1e-09
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using normal smoothing for the distance and second order elements."
  [../]

  [./pl_test4nns]
    type = 'Exodiff'
    input = 'pl_test4nns.i'
    exodiff = 'pl_test4nns_out.e'
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using nodal normal based smoothing."
  [../]

  [./pl_test4qnns]
    type = 'Exodiff'
    input = 'pl_test4qnns.i'
    exodiff = 'pl_test4qnns_out.e'
    abs_zero = 1e-09
    group = 'geometric'
    custom_cmp = exclude_elem_id.cmp
    allow_warnings = true
    requirement = "The PenetrationAux object shall be capable of computing the distance, tangential distance, normal, closest point, side id, and element id between a flat and concave disjoint surfaces of a moving interface in 2D using nodal normal based smoothing and second order elements."
  [../]

  [restart]
    requirement = "The systems shall be capable of performing simulations with geometric penetration"

    [part1]
      type = 'Exodiff'
      input = 'restart.i'
      exodiff = 'restart_out.e'
      group = 'geometric'
      custom_cmp = exclude_elem_id.cmp
      allow_warnings = true

      detail = "computed within one simulation"
    []

    [part2]
      type = 'Exodiff'
      input = 'restart2.i'
      exodiff = 'restart2_out.e'
      group = 'geometric'
      custom_cmp = exclude_elem_id.cmp
      prereq = restart/part1
      recover = false # Turns out this isn't working in HEAD - we have more work to properly recover a restart test #5877
      allow_warnings = true

      detail = "that are restarted from a another."
    []
  []
[]
