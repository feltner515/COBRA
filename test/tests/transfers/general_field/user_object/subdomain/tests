[Tests]
  issues = '#16427 #16429'
  design = 'transfers/MultiAppGeneralFieldUserObjectTransfer.md'

  [2d_overlay]
    requirement = "The system shall be able to transfer user-defined spatial data on the origin "
                  "mesh, limiting the transfer to a few subdomains,"
    [same_var_type]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'main_out.e main_out_sub0.e main_out_sub1.e main_out_sub2.e'
      detail = "for variables of the same type,"
    []

    [from_blocks]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'from_block.e from_block_sub0.e from_block_sub1.e from_block_sub2.e'
      # This removes the block restriction by adding all the blocks
      cli_args = "Outputs/file_base=from_block
                  Transfers/from_sub/to_blocks='0 1' Transfers/from_sub_elem/to_blocks='0 1'
                  Transfers/to_sub/to_blocks='0 1' Transfers/to_sub_elem/to_blocks='0 1'"
      detail = "with block restriction only in the origin mesh,"
    []

    [to_blocks]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'to_block.e to_block_sub0.e to_block_sub1.e to_block_sub2.e'
      # This removes the block restriction by adding all the blocks
      cli_args = "Outputs/file_base=to_block
                  Transfers/from_sub/from_blocks='0 1' Transfers/from_sub_elem/from_blocks='0 1'
                  Transfers/to_sub/from_blocks='0 1' Transfers/to_sub_elem/from_blocks='0 1'"
      detail = "with block restriction only in the target mesh,"
    []

    [projection_needed_receiving]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'projection_receive.e projection_receive_sub0.e projection_receive_sub1.e projection_receive_sub2.e'
      # Set various types of finite element families to the received variables in both apps
      cli_args = "Outputs/file_base=projection_receive Mesh/second_order=true
                  AuxVariables/from_sub/order=SECOND AuxVariables/from_sub_elem/order=SECOND
                  MultiApps/sub/cli_args='Mesh/second_order=true;AuxVariables/from_main/order=SECOND;AuxVariables/from_main_elem/order=FIRST'"
      detail = "for variables of arbitrary types with higher order on the receiving app"
    []
  []
  [errors]
    requirement = 'The system shall error if'
    [from_block_and_extrapolation]
      type = RunException
      input = 'main.i'
      cli_args = "Transfers/from_sub_v2/type=MultiAppGeneralFieldUserObjectTransfer Transfers/from_sub_v2/from_multi_app=sub
                  Transfers/from_sub_v2/source_user_object=to_main Transfers/from_sub_v2/variable=from_sub
                  Transfers/from_sub_v2/from_blocks='0 1' Transfers/from_sub_v2/from_app_must_contain_point=false
                  Transfers/from_sub_v2/bbox_factor=1.0000001"
      expect_err = 'Source block restriction cannot be used at the same type as allowing extrapolation'
      detail = 'source block restriction is used at the same time as an extrapolation option, without explicitly specifying an extrapolation constant, as both are semantically incompatible so the user must explicitly request it to allow it.'
    []
  []
[]
