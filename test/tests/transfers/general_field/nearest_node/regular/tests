[Tests]
  issues = '#16427 #16429'
  design = 'transfers/MultiAppGeneralFieldNearestNodeTransfer.md'

  [2d_overlay]
    requirement = "The system shall be able to transfer variables using the value from the nearest node in the origin mesh"
    [same_var_type]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'main_out.e main_out_sub0_out.e main_out_sub1_out.e main_out_sub2_out.e'
      detail = "for variables of the same type,"
    []

    [projection_needed_receiving]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'projection_receive.e projection_receive_sub0_out.e projection_receive_sub1_out.e projection_receive_sub2_out.e'
      # Set various types of finite element families to the received variables in both apps
      cli_args = "Outputs/file_base=projection_receive Mesh/second_order=true
                  GlobalParams/bbox_factor=1.5
                  AuxVariables/from_sub/order=SECOND AuxVariables/from_sub_elem/order=SECOND
                  MultiApps/sub/cli_args='Mesh/second_order=true;AuxVariables/from_main/order=SECOND;AuxVariables/from_main_elem/order=FIRST'"
      detail = "for variables of arbitrary types with higher order on the receiving app,"

      # The value conflict search shows there are indetermination in which values get selected
      # This is more an issue with using nearest node to build a higher order variable, which
      # doesnt always make sense: the source information is piecewise flat
      max_parallel = 5
    []

    [projection_needed_sending]
      type = 'Exodiff'
      input = 'main.i'
      exodiff = 'projection_send.e projection_send_sub0_out.e projection_send_sub1_out.e projection_send_sub2_out.e'
      # Set various types of finite element families to the transfered variables in both apps
      cli_args = "Outputs/file_base=projection_send Mesh/second_order=true
                  AuxVariables/to_sub/order=SECOND AuxVariables/to_sub_elem/order=SECOND
                  MultiApps/sub/cli_args='Mesh/second_order=true;AuxVariables/to_main/order=FIRST;AuxVariables/to_main_elem/order=SECOND'"
      detail = "for nodal variables of arbitrary types with higher order on the sending app,"
      # NOTE: The results on the subapps look very coarse because this is a nearest node transfer
      # Even though the source variable is continuous and varies over the target mesh,
      # only the (nearest) node values matter. Hence the checkerboards.
    []

    [array_variables]
      type = Exodiff
      input = main_array.i
      exodiff = 'array.e array_sub0_out.e array_sub1_out.e array_sub2_out.e'
      cli_args = "Outputs/file_base=array"
      detail = "for array variables"
    []

    [fixed_bounding_boxes]
      type = Exodiff
      input = main.i
      exodiff = 'main_out.e main_out_sub0_out.e main_out_sub1_out.e main_out_sub2_out.e'
      # Offset the subapps off the plane and override the bounding box to keep them inside the scope
      # The offsets have to be the same to keep the same distances relatively, to keep the same gold files
      cli_args = "MultiApps/sub/positions='0.000001 0 0.1 0.4111 0.4112 -0.1 0.6999 0.099 0.1'
                  Transfers/from_sub/fixed_bounding_box_size='0.2 0.2 1' Transfers/from_sub_elem/fixed_bounding_box_size='0.2 0.2 1'
                  Transfers/to_sub/fixed_bounding_box_size='1 1 0.3' Transfers/to_sub_elem/fixed_bounding_box_size='1 1 0.3'"
      detail = "while allowing for an user to set the size of the application bounding box directly"
    []
  []

  [overlap]
    requirement = "The system shall be able to detect indetermination in a transfer due to"
    [equidistant_problems]
      type = RunException
      input = main.i
      cli_args = "Transfers/active='from_sub' Transfers/from_sub/search_value_conflicts=true MultiApps/sub/positions='-0.01 0 0 0.01 0 0'"
      expect_err = "multiple valid values from equidistant points were "
      detail = 'equidistant source nearest nodes in different problems '
    []

    [too_many_nearest_points]
      type = RunException
      input = main.i
      # The child apps overlap and send multiple valid points for each target point on the destination app (parent)
      cli_args = "Transfers/active='from_sub' Transfers/from_sub/search_value_conflicts=true MultiApps/sub/positions='0.05 0.05 0'"
      expect_err = "multiple valid values from equidistant points were "
      detail = 'the furthest of the nearest nodes desired being equidistant to the target point as the next furthest'
    []
  []
[]
