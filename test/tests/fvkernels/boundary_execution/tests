[Tests]
  issues = '#20695'
  design = 'fv_design.md'
  [force_all_boundaries]
    type = Exodiff
    input = 2d.i
    exodiff = 2d_all.e
    requirement = 'The system shall be able to force execution of flux kernels on all external boundaries.'
    cli_args = 'Outputs/file_base=2d_all FVKernels/diff_all/force_boundary_execution=true FVKernels/diff_part/force_boundary_execution=true'
  []
  [force_external_boundary]
    type = Exodiff
    input = 2d.i
    exodiff = 2d_bot.e
    requirement = 'The system shall be able to force execution of flux kernels on one (or several) external boundary(ies).'
    cli_args = 'Outputs/file_base=2d_bot FVKernels/diff_all/boundaries_to_force=bottom FVKernels/diff_part/boundaries_to_force=bottom'
  []
  [ignore_post_forcing]
    type = Exodiff
    input = 2d.i
    exodiff = 2d_bot.e
    requirement = 'The system shall be able to force execution of flux kernels on all but one (or several) external boundary(ies).'
    cli_args = "Outputs/file_base=2d_bot FVKernels/diff_all/force_boundary_execution=true FVKernels/diff_all/boundaries_to_avoid='top' FVKernels/diff_part/force_boundary_execution=true"
    prereq = force_external_boundary
  []
  [ignore_internal_boundaries]
    type = Exodiff
    input = 2d.i
    exodiff = 2d_internal.e
    requirement = 'The system shall be able to avoid executing on one (or several) internal boundary(ies) or sidesets.'
    cli_args = "Outputs/file_base=2d_internal FVKernels/diff_all/boundaries_to_avoid='corner_inward'"
  []

  [overlapping_lists]
    type = RunException
    input = 2d.i
    expect_err = 'A boundary may not be specified in both boundaries_to_avoid and boundaries_to_force'
    requirement = 'The system shall error if conflictingly told to avoid and execute a flux kernel on the same boundary.'
    cli_args = "FVKernels/diff_all/boundaries_to_avoid='left' FVKernels/diff_all/boundaries_to_force='left'"
  []
[]
