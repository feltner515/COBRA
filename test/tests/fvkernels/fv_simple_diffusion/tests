[Tests]
  design = 'fv_design.md'
  issues = '#14549'
  [dirichlet]
    type = 'Exodiff'
    input = 'dirichlet.i'
    exodiff = 'dirichlet_out.e'

    requirement = 'The system shall run a simple 2D linear diffusion problem using the finite volume method with Dirichlet boundary conditions on a regular mesh.'
  []
  [dirichlet_rz]
    type = 'Exodiff'
    input = 'dirichlet_rz.i'
    exodiff = 'dirichlet_rz_out.e'
    requirement = 'The system shall run a simple 2D linear diffusion problem in RZ coordinates using the finite volume method with Dirichlet boundary conditions on a regular mesh.'
  []
  [dirichlet_full_jac]
    type = 'Exodiff'
    input = 'dirichlet.i'
    exodiff = 'dirichlet_out.e'
    prereq = 'dirichlet'
    cli_args = 'Executioner/solve_type=NEWTON'

    requirement = 'The system shall be able to compute a full Jacobian matrix when performing finite volume computations'
  []

  [neumann]
    requirement = 'The system shall run a simple 2D linear diffusion problem using the finite volume method with Neumann and Dirichlet boundary conditions on a regular mesh, computing the Jacobian and residual:'
    [neumann]
      type = 'Exodiff'
      input = 'neumann.i'
      exodiff = 'neumann_out.e'
      detail = 'separately'
    []
    [neumann_together]
      type = 'Exodiff'
      input = 'neumann.i'
      exodiff = 'neumann_together.e'
      detail = 'together'
      cli_args = 'Outputs/file_base=neumann_together Executioner/residual_and_jacobian_together=true'
    []
  []

  [transient]
    type = 'Exodiff'
    input = 'transient.i'
    exodiff = 'transient_out.e'
    requirement = 'The system shall run a simple 2D transient linear diffusion problem using the finite volume method with Dirichlet boundary conditions on a regular mesh.'
    method = '!dbg'
  []

  [refinement]
    requirement = 'The system shall be able to solve a finite-volume-only problem'
    [no_refinement]
      type = 'Exodiff'
      input = 'fv_only.i'
      exodiff = 'fv_only_out.e'
      detail = 'on an unrefined mesh'
    []
    [refinement]
      type = 'Exodiff'
      input = 'fv_only_refined.i'
      exodiff = 'fv_only_refined_out.e'
      detail = 'and on a mesh that has been refined to have the same amount of elements and achieve identical results'
    []
  []

  [3d_dirichlet]
    type = 'Exodiff'
    input = '3d_dirichlet.i'
    exodiff = '3d_dirichlet_out.e'
    requirement = 'The system shall be able solve a three-dimensional diffusion problem using the finite volume method.'
  []

  [1d_dirichlet]
    type = 'Exodiff'
    input = '1d_dirichlet.i'
    exodiff = '1d_dirichlet_out.e'
    requirement = 'The system shall be able solve a one-dimensional diffusion problem using the finite volume method.'
  []

  [unstructured-rz]
    type = 'Exodiff'
    input = 'unstructured-rz.i'
    exodiff = 'unstructured-rz_out.e'
    issues = '#15063'
    requirement = 'The system shall correctly account for differences between gradient and divergence operators in cylindrical coordinates.'
  []

  [gradient-jump]
    type = 'CSVDiff'
    input = 'grad-adaptive.i'
    csvdiff = 'grad-adaptive_csv.csv'
    issues = '#20705'
    design = 'GradientJumpIndicator.md'
    requirement = 'The system shall be able to perform Laplacian-based adaptivity with finite volume variables.'
  []

  [constrained]
    type = 'Exodiff'
    input = 'dirichlet-constrained-average-value.i'
    exodiff = 'dirichlet-constrained-average-value_out.e'
    design = 'FVBoundaryIntegralValueConstraint.md'
    issues = '#23745'
    requirement = 'The system shall be able to impose the constraint that the average value of a variable on a boundary be a prescribed value.'
  []
[]
