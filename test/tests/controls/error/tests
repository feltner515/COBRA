[Tests]
  issues = '#5676'
  design = 'syntax/Controls/index.md'
  [./non_controllable_error]
    # Test non-controllable parameter error
    type = RunException
    input = 'non_controllable_error.i'
    expect_err = "The desired parameter 'Kernels/diff/non_controllable"
    match_literal = true
    requirement = "The Control system shall error if an attempt to alter a non-controllable parameter is performed."
  [../]

  [./multiple_params_found_warning]
    # Test error message when single parameter is requested, but multiple exist
    type = RunApp
    input = 'multiple_parameters_found.i'
    expect_out = "The following controlled parameters are being retrieved"
    allow_warnings = true
    requirement = "The Control system shall error if multiple controllable parameters exists, but only a single parameter is expected to be controlled."
  [../]

  [./no_param_found]
    # Test that an invalid parameter name errors properly
    type = RunException
    input = 'no_parameter_found.i'
    expect_err = "The desired parameter 'unknown_param_name' was not located"
    match_literal = true
    requirement = "The Control system shall error if an unknown parameter is supplied for control."
  [../]

  [./tid_warehouse_error]
    # Test tid assert on MooseObjectWarehouse
    type = RunException
    input = 'tid_warehouse_error.i'
    expect_err = "Attempting to access a thread id \(12345\) greater than the number allowed by the storage item \(1\)"
    method = 'dbg'
    requirement = "The Control system shall error if a thread id greater than the number of threads available is supplied when retrieving a Control object."
  [../]

  [./disable_executioner]
    # Test that certain objects (e.g., Executioner) may not be disabled
    type = RunException
    input = 'disable_executioner.i'
    expect_err = "The desired parameter 'Executioner::\*/enable"
    requirement = "The Control system shall error if an attempt is made to disable the Executioner."
  [../]

  [./non_existing_dependency]
    # Test that non existing dependency errors out properly
    type = RunException
    input = 'non_existing_dependency.i'
    expect_err = "The Control \"no-control\" was not created, did you make a spelling mistake or forget to include it in your input file\?"
    requirement = "The Control system shall error if an invalid control name is supplied to the Control dependency resolution procedure."
  [../]
[]
