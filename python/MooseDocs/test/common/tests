[Tests]
  issues = '#6699'
  design = 'MooseDocs/index.md'
  [storage]
    type = PythonUnitTest
    input = test_storage.py
    requirement = "The system shall have a storage structure for holding ordered items by name."
  []
  [parse_settings]
    type = PythonUnitTest
    input = test_parse_settings.py
    requirement = "The system shall include utility for parsing key, value pairs from a string."
  []
  [exceptions]
    type = PythonUnitTest
    input = test_exceptions.py
    requirement = "The system shall include special exceptions for use during tokenization and rendering."
  []
  [box]
    type = PythonUnitTest
    input = test_box.py
    requirement = "The system shall include a utility for creating text boxes suitable for terminal output."
  []
  [mixins]
    type = PythonUnitTest
    input = test_mixins.py
    requirement = "The system shall include mixin classes for creating objects that require configuration data, translator objects, or component objects."
  []
  [load_extensions]
    type = PythonUnitTest
    input = test_load_extensions.py
    requirement = "The system shall include the ability to load extensions dynamically."
  []
  [load_config]
    type = PythonUnitTest
    input = test_load_config.py
    requirement = "The system shall include a YAML based configuration."
  []
  [class_database]
    type = PythonUnitTest
    input = test_database.py
    requirement = "The system shall include a database object for storing information regarding source files."
  []
  [get_pages]
    type = PythonUnitTest
    input = test_get_pages.py
    requirement = "The system shall include the ability to build a file tree from markdown files."
  []
  [project_find]
    type = PythonUnitTest
    input = test_project_find.py
    requirement = "The system shall include a utility for locating filenames using a fuzzy search."
  []
  [check_filenames]
    type = PythonUnitTest
    input = test_check_filenames.py
    requirement = "The system shall include a utility to locate a filename using a fuzzy search and error if none or multiple are located."
  []
  [has_tokens]
    type = PythonUnitTest
    input = test_has_tokens.py
    requirement = "The system shall include a utility to conditionally add dependencies to output of documentation based on the existence of certain content."
    issues = '#16789'
  []
[]
