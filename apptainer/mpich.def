{#- Required jinja arguments                                                                  -#}
{#- ARCH: The machine arch                                                                    -#}

{#- Optional jinja arguments                                                                  -#}
{#- ALTERNATE_FROM: Set an alternate from (currently supported: rocky9)                       -#}

BootStrap: oras
{%- if ALTERNATE_FROM == "rocky9" %}
From: mooseharbor.hpc.inl.gov/moose-hpcbase/rocky9-{{ ARCH }}:9.0-0
{%- elif ALTERNATE_FROM == "clang" %}
From: mooseharbor.hpc.inl.gov/moose-hpcbase/rocky8-clang-{{ ARCH }}:8.6-0
{%- elif ALTERNATE_FROM == "cuda" %}
From: mooseharbor.hpc.inl.gov/moose-hpcbase/rocky8-cuda-{{ ARCH }}:8.6-cuda11.4.0-0
{%- else %}
From: harbor.hpc.inl.gov/hpcbase/mpi_03:1.1.0
{%- endif %}

%environment
    # Fix locale warnings
    export LC_ALL=C

%post
    export MOOSE_MPICH_DIR=${MOOSE_MPICH_DIR:-"/opt/mpi/mpich-3.4.3"}
    export MOOSE_OPENMPI_DIR=${MOOSE_OPENMPI_DIR:-"/opt/mpi/openmpi-4.1.5"}

    # Get the RHEL version
    RHEL_VERSION=$(awk -F'=' '/VERSION_ID/{ gsub(/"/,""); print $2}' /etc/os-release)

    # Prepare a temp directory
    TEMP_LOC=/root/build
    mkdir ${TEMP_LOC}

    # Enable power tools
    dnf install -y dnf-plugins-core
    if [[ $RHEL_VERSION = 9* ]]; then
        dnf config-manager --enable crb
    else
        dnf config-manager --set-enabled powertools
        dnf install -y redhat-lsb-core.x86_64
    fi
    # Additional installs
    dnf install -y vim tmux emacs wget rsync hostname python3-pyyaml python3-devel python39 \
                   cmake diffutils bison flex perl-IO-Compress perl-JSON perl-JSON-PP \
                   libtirpc libtirpc-devel zlib-devel patch patchutils epel-release file \
                   libpng libpng-devel unzip jq valgrind cppunit doxygen fftw-devel gsl-devel \
                   libtool autoconf automake
    # After epel-release
    dnf install -y glpk-devel patchelf lcov

    # Make python default to python3
    if [[ $RHEL_VERSION = 9* ]]; then
        alternatives --install /usr/bin/python python /usr/bin/python3 0
    else
        alternatives --set python /usr/bin/python3
    fi

    # Allow a custom initialization routine if the following files exist at /
    touch ${SINGULARITY_ROOTFS}/none
    cat <<'EOF' >> ${SINGULARITY_ROOTFS}/.singularity.d/env/90-environment.sh
# If discovered, use these files as initialization routines
if [ -f /init_env ]; then
  file="/init_env"
else
  file="/none"
fi
action="${0##*/}"
case "${action}" in
shell)
    if [ "${SINGULARITY_SHELL:-}" = "/bin/bash" ]; then
        set -- --noprofile --rcfile $file
    elif test -z "${SINGULARITY_SHELL:-}"; then
        export SINGULARITY_SHELL=/bin/bash
        set -- --noprofile --rcfile $file
    fi
    ;;
exec)
    export BASH_ENV="$file"
    set -- /bin/bash --noprofile --rcfile $file -c "$*"
    ;;
run)
    set -- /bin/bash --noprofile --rcfile $file
esac
EOF

    # Create a pretty prompt (ensure last item sourced)
    cat <<'EOF' > ${SINGULARITY_ROOTFS}/.singularity.d/env/99-zzz_prompt.sh
PS1="\[\033[1;34m\][`basename ${APPTAINER_NAME:-$SINGULARITY_NAME} .sif`]\[\033[1;32m\][\w]\[\033[0m\]> "
EOF

    # We need git lfs
    mkdir ${TEMP_LOC}/gitlfs
    cd ${TEMP_LOC}/gitlfs
    curl -L -O https://github.com/git-lfs/git-lfs/releases/download/v3.2.0/git-lfs-linux-amd64-v3.2.0.tar.gz
    tar -xf git-lfs-linux-amd64-v3.2.0.tar.gz
    cd git-lfs-3.2.0
    ./install.sh

    # Basic script for setting mpich environment
    USE_MPI_SCRIPT='export LD_LIBRARY_PATH=${MOOSE_MPI_DIR}/lib:${LD_LIBRARY_PATH}
export MANPATH=${MOOSE_MPI_DIR}/share/man:${MANPATH}
export PATH=${MOOSE_MPI_DIR}/bin:${PATH}
export CC=mpicc CXX=mpicxx FC=mpif90 F90=mpif90 F77=mpif77'

    # Add script for loading mpich environment
    cat << EOF > /opt/mpi/use-mpich
#!/bin/bash
export MOOSE_MPI_DIR=${MOOSE_MPICH_DIR}
${USE_MPI_SCRIPT}
EOF

    # Add script for loading openmpi environment
    cat << EOF > /opt/mpi/use-openmpi
#!/bin/bash
export MOOSE_MPI_DIR=${MOOSE_OPENMPI_DIR}
${USE_MPI_SCRIPT}
EOF

    # Clean Up
    rm -rf ${TEMP_LOC}
    dnf clean all
